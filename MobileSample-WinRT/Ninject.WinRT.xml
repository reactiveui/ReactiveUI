<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ninject.WinRT</name>
    </assembly>
    <members>
        <member name="T:Ninject.Activation.Blocks.ActivationBlock">
            <summary>
            A block used for deterministic disposal of activated instances. When the block is
            disposed, all instances activated via it will be deactivated.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.ActivationBlock.#ctor(Ninject.Syntax.IResolutionRoot)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Activation.Blocks.ActivationBlock"/> class.
            </summary>
            <param name="parent">The parent resolution root.</param>
        </member>
        <member name="M:Ninject.Activation.Blocks.ActivationBlock.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Blocks.ActivationBlock.CanResolve(Ninject.Activation.IRequest)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="request">The request.</param>
            <returns><c>True</c> if the request can be resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ninject.Activation.Blocks.ActivationBlock.CanResolve(Ninject.Activation.IRequest,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="request">The request.</param>
            <param name="ignoreImplicitBindings">if set to <c>true</c> implicit bindings are ignored.</param>
            <returns>
                <c>True</c> if the request can be resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ninject.Activation.Blocks.ActivationBlock.Resolve(Ninject.Activation.IRequest)">
            <summary>
            Resolves instances for the specified request. The instances are not actually resolved
            until a consumer iterates over the enumerator.
            </summary>
            <param name="request">The request to resolve.</param>
            <returns>An enumerator of instances that match the request.</returns>
        </member>
        <member name="M:Ninject.Activation.Blocks.ActivationBlock.CreateRequest(System.Type,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter},System.Boolean,System.Boolean)">
            <summary>
            Creates a request for the specified service.
            </summary>
            <param name="service">The service that is being requested.</param>
            <param name="constraint">The constraint to apply to the bindings to determine if they match the request.</param>
            <param name="parameters">The parameters to pass to the resolution.</param>
            <param name="isOptional"><c>True</c> if the request is optional; otherwise, <c>false</c>.</param>
            <param name="isUnique"><c>True</c> if the request should return a unique result; otherwise, <c>false</c>.</param>
            <returns>The created request.</returns>
        </member>
        <member name="P:Ninject.Activation.Blocks.ActivationBlock.Parent">
            <summary>
            Gets or sets the parent resolution root (usually the kernel).
            </summary>
        </member>
        <member name="E:Ninject.Activation.Blocks.ActivationBlock.Disposed">
            <summary>
            Occurs when the object is disposed.
            </summary>
        </member>
        <member name="T:Ninject.Activation.Caching.ActivationCache">
            <summary>
            Stores the objects that were activated
            </summary>
        </member>
        <member name="F:Ninject.Activation.Caching.ActivationCache.activatedObjects">
            <summary>
            The objects that were activated as reference equal weak references.
            </summary>
        </member>
        <member name="F:Ninject.Activation.Caching.ActivationCache.deactivatedObjects">
            <summary>
            The objects that were activated as reference equal weak references.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Caching.ActivationCache.#ctor(Ninject.Activation.Caching.ICachePruner)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Activation.Caching.ActivationCache"/> class.
            </summary>
            <param name="cachePruner">The cache pruner.</param>
        </member>
        <member name="M:Ninject.Activation.Caching.ActivationCache.Clear">
            <summary>
            Clears the cache.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Caching.ActivationCache.AddActivatedInstance(System.Object)">
            <summary>
            Adds an activated instance.
            </summary>
            <param name="instance">The instance to be added.</param>
        </member>
        <member name="M:Ninject.Activation.Caching.ActivationCache.AddDeactivatedInstance(System.Object)">
            <summary>
            Adds an deactivated instance.
            </summary>
            <param name="instance">The instance to be added.</param>
        </member>
        <member name="M:Ninject.Activation.Caching.ActivationCache.IsActivated(System.Object)">
            <summary>
            Determines whether the specified instance is activated.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
                <c>true</c> if the specified instance is activated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ninject.Activation.Caching.ActivationCache.IsDeactivated(System.Object)">
            <summary>
            Determines whether the specified instance is deactivated.
            </summary>
            <param name="instance">The instance.</param>
            <returns>
                <c>true</c> if the specified instance is deactivated; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ninject.Activation.Caching.ActivationCache.Prune">
            <summary>
            Prunes this instance.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Caching.ActivationCache.RemoveDeadObjects(System.Collections.Generic.HashSet{System.Object})">
            <summary>
            Removes all dead objects.
            </summary>
            <param name="objects">The objects collection to be freed of dead objects.</param>
        </member>
        <member name="P:Ninject.Activation.Caching.ActivationCache.ActivatedObjectCount">
            <summary>
            Gets the activated object count.
            </summary>
            <value>The activated object count.</value>
        </member>
        <member name="P:Ninject.Activation.Caching.ActivationCache.DeactivatedObjectCount">
            <summary>
            Gets the deactivated object count.
            </summary>
            <value>The deactivated object count.</value>
        </member>
        <member name="T:Ninject.Activation.Caching.Cache">
            <summary>
            Tracks instances for re-use in certain scopes.
            </summary>
        </member>
        <member name="F:Ninject.Activation.Caching.Cache.entries">
            <summary>
            Contains all cached instances.
            This is a dictionary of scopes to a multimap for bindings to cache entries.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.#ctor(Ninject.Activation.IPipeline,Ninject.Activation.Caching.ICachePruner)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Activation.Caching.Cache"/> class.
            </summary>
            <param name="pipeline">The pipeline component.</param>
            <param name="cachePruner">The cache pruner component.</param>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.Remember(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Stores the specified context in the cache.
            </summary>
            <param name="context">The context to store.</param>
            <param name="reference">The instance reference.</param>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.TryGet(Ninject.Activation.IContext)">
            <summary>
            Tries to retrieve an instance to re-use in the specified context.
            </summary>
            <param name="context">The context that is being activated.</param>
            <returns>The instance for re-use, or <see langword="null"/> if none has been stored.</returns>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.Release(System.Object)">
            <summary>
            Deactivates and releases the specified instance from the cache.
            </summary>
            <param name="instance">The instance to release.</param>
            <returns><see langword="True"/> if the instance was found and released; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.Prune">
            <summary>
            Removes instances from the cache which should no longer be re-used.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.Clear(System.Object)">
            <summary>
            Immediately deactivates and removes all instances in the cache that are owned by
            the specified scope.
            </summary>
            <param name="scope">The scope whose instances should be deactivated.</param>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.Clear">
            <summary>
            Immediately deactivates and removes all instances in the cache, regardless of scope.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.GetAllBindingEntries(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Ninject.Planning.Bindings.IBindingConfiguration,System.Collections.Generic.ICollection{Ninject.Activation.Caching.Cache.CacheEntry}}})">
            <summary>
            Gets all entries for a binding withing the selected scope.
            </summary>
            <param name="bindings">The bindings.</param>
            <returns>All bindings of a binding.</returns>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.GetAllCacheEntries">
            <summary>
            Gets all cache entries.
            </summary>
            <returns>Returns all cache entries.</returns>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.Forget(System.Collections.Generic.IEnumerable{Ninject.Activation.Caching.Cache.CacheEntry})">
            <summary>
            Forgets the specified cache entries.
            </summary>
            <param name="cacheEntries">The cache entries.</param>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.Forget(Ninject.Activation.Caching.Cache.CacheEntry)">
            <summary>
            Forgets the specified entry.
            </summary>
            <param name="entry">The entry.</param>
        </member>
        <member name="P:Ninject.Activation.Caching.Cache.Pipeline">
            <summary>
            Gets the pipeline component.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Caching.Cache.Count">
            <summary>
            Gets the number of entries currently stored in the cache.
            </summary>
        </member>
        <member name="T:Ninject.Activation.Caching.Cache.CacheEntry">
            <summary>
            An entry in the cache.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Caching.Cache.CacheEntry.#ctor(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Activation.Caching.Cache.CacheEntry"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">The instance reference.</param>
        </member>
        <member name="P:Ninject.Activation.Caching.Cache.CacheEntry.Context">
            <summary>
            Gets the context of the instance.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Ninject.Activation.Caching.Cache.CacheEntry.Reference">
            <summary>
            Gets the instance reference.
            </summary>
            <value>The instance reference.</value>
        </member>
        <member name="T:Ninject.Activation.Caching.GarbageCollectionCachePruner">
            <summary>
            Uses a <see cref="!:Timer"/> and some <see cref="T:System.WeakReference"/> magic to poll
            the garbage collector to see if it has run.
            </summary>
        </member>
        <member name="F:Ninject.Activation.Caching.GarbageCollectionCachePruner.indicator">
            <summary>
            indicator for if GC has been run.
            </summary>
        </member>
        <member name="F:Ninject.Activation.Caching.GarbageCollectionCachePruner.caches">
            <summary>
            The caches that are being pruned.
            </summary>
        </member>
        <member name="F:Ninject.Activation.Caching.GarbageCollectionCachePruner.timer">
            <summary>
            The timer used to trigger the cache pruning
            </summary>
        </member>
        <member name="M:Ninject.Activation.Caching.GarbageCollectionCachePruner.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Caching.GarbageCollectionCachePruner.Start(Ninject.Activation.Caching.IPruneable)">
            <summary>
            Starts pruning the specified pruneable based on the rules of the pruner.
            </summary>
            <param name="pruneable">The pruneable that will be pruned.</param>
        </member>
        <member name="M:Ninject.Activation.Caching.GarbageCollectionCachePruner.Stop">
            <summary>
            Stops pruning.
            </summary>
        </member>
        <member name="T:Ninject.Activation.Context">
            <summary>
            Contains information about the activation of a single instance.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Context.#ctor(Ninject.IKernel,Ninject.Activation.IRequest,Ninject.Planning.Bindings.IBinding,Ninject.Activation.Caching.ICache,Ninject.Planning.IPlanner,Ninject.Activation.IPipeline)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Activation.Context"/> class.
            </summary>
            <param name="kernel">The kernel managing the resolution.</param>
            <param name="request">The context's request.</param>
            <param name="binding">The context's binding.</param>
            <param name="cache">The cache component.</param>
            <param name="planner">The planner component.</param>
            <param name="pipeline">The pipeline component.</param>
        </member>
        <member name="M:Ninject.Activation.Context.GetScope">
            <summary>
            Gets the scope for the context that "owns" the instance activated therein.
            </summary>
            <returns>The object that acts as the scope.</returns>
        </member>
        <member name="M:Ninject.Activation.Context.GetProvider">
            <summary>
            Gets the provider that should be used to create the instance for this context.
            </summary>
            <returns>The provider that should be used.</returns>
        </member>
        <member name="M:Ninject.Activation.Context.Resolve">
            <summary>
            Resolves the instance associated with this hook.
            </summary>
            <returns>The resolved instance.</returns>
        </member>
        <member name="P:Ninject.Activation.Context.Kernel">
            <summary>
            Gets the kernel that is driving the activation.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Context.Request">
            <summary>
            Gets the request.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Context.Binding">
            <summary>
            Gets the binding.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Context.Plan">
            <summary>
            Gets or sets the activation plan.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Context.Parameters">
            <summary>
            Gets the parameters that were passed to manipulate the activation process.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Context.GenericArguments">
            <summary>
            Gets the generic arguments for the request, if any.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Context.HasInferredGenericArguments">
            <summary>
            Gets a value indicating whether the request involves inferred generic arguments.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Context.Cache">
            <summary>
            Gets or sets the cache component.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Context.Planner">
            <summary>
            Gets or sets the planner component.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Context.Pipeline">
            <summary>
            Gets or sets the pipeline component.
            </summary>
        </member>
        <member name="T:Ninject.Activation.Pipeline">
            <summary>
            Drives the activation (injection, etc.) of an instance.
            </summary>
        </member>
        <member name="F:Ninject.Activation.Pipeline.activationCache">
            <summary>
            The activation cache.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Pipeline.#ctor(System.Collections.Generic.IEnumerable{Ninject.Activation.Strategies.IActivationStrategy},Ninject.Activation.Caching.IActivationCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Activation.Pipeline"/> class.
            </summary>
            <param name="strategies">The strategies to execute during activation and deactivation.</param>
            <param name="activationCache">The activation cache.</param>
        </member>
        <member name="M:Ninject.Activation.Pipeline.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Activates the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">The instance reference.</param>
        </member>
        <member name="M:Ninject.Activation.Pipeline.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Deactivates the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">The instance reference.</param>
        </member>
        <member name="P:Ninject.Activation.Pipeline.Strategies">
            <summary>
            Gets the strategies that contribute to the activation and deactivation processes.
            </summary>
        </member>
        <member name="T:Ninject.Activation.Request">
            <summary>
            Describes the request for a service resolution.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Request.#ctor(System.Type,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter},System.Func{System.Object},System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Activation.Request"/> class.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="constraint">The constraint that will be applied to filter the bindings used for the request.</param>
            <param name="parameters">The parameters that affect the resolution.</param>
            <param name="scopeCallback">The scope callback, if an external scope was specified.</param>
            <param name="isOptional"><c>True</c> if the request is optional; otherwise, <c>false</c>.</param>
            <param name="isUnique"><c>True</c> if the request should return a unique result; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Ninject.Activation.Request.#ctor(Ninject.Activation.IContext,System.Type,Ninject.Planning.Targets.ITarget,System.Func{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Activation.Request"/> class.
            </summary>
            <param name="parentContext">The parent context.</param>
            <param name="service">The service that was requested.</param>
            <param name="target">The target that will receive the injection.</param>
            <param name="scopeCallback">The scope callback, if an external scope was specified.</param>
        </member>
        <member name="M:Ninject.Activation.Request.Matches(Ninject.Planning.Bindings.IBinding)">
            <summary>
            Determines whether the specified binding satisfies the constraints defined on this request.
            </summary>
            <param name="binding">The binding.</param>
            <returns><c>True</c> if the binding satisfies the constraints; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ninject.Activation.Request.GetScope">
            <summary>
            Gets the scope if one was specified in the request.
            </summary>
            <returns>The object that acts as the scope.</returns>
        </member>
        <member name="M:Ninject.Activation.Request.CreateChild(System.Type,Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>
            Creates a child request.
            </summary>
            <param name="service">The service that is being requested.</param>
            <param name="parentContext">The context in which the request was made.</param>
            <param name="target">The target that will receive the injection.</param>
            <returns>The child request.</returns>
        </member>
        <member name="M:Ninject.Activation.Request.ToString">
            <summary>
            Formats this object into a meaningful string representation.
            </summary>
            <returns>The request formatted as string.</returns>
        </member>
        <member name="P:Ninject.Activation.Request.Service">
            <summary>
            Gets the service that was requested.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Request.ParentRequest">
            <summary>
            Gets the parent request.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Request.ParentContext">
            <summary>
            Gets the parent context.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Request.Target">
            <summary>
            Gets the target that will receive the injection, if any.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Request.Constraint">
            <summary>
            Gets the constraint that will be applied to filter the bindings used for the request.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Request.Parameters">
            <summary>
            Gets the parameters that affect the resolution.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Request.ActiveBindings">
            <summary>
            Gets the stack of bindings which have been activated by either this request or its ancestors.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Request.Depth">
            <summary>
            Gets the recursive depth at which this request occurs.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Request.IsOptional">
            <summary>
            Gets or sets value indicating whether the request is optional.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Request.IsUnique">
            <summary>
            Gets or sets value indicating whether the request is for a single service.
            </summary>
        </member>
        <member name="P:Ninject.Activation.Request.ScopeCallback">
            <summary>
            Gets the callback that resolves the scope for the request, if an external scope was provided.
            </summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.ActivationCacheStrategy">
            <summary>
            Adds all activated instances to the activation cache.
            </summary>
        </member>
        <member name="F:Ninject.Activation.Strategies.ActivationCacheStrategy.activationCache">
            <summary>
            The activation cache.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.ActivationCacheStrategy.#ctor(Ninject.Activation.Caching.IActivationCache)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Activation.Strategies.ActivationCacheStrategy"/> class.
            </summary>
            <param name="activationCache">The activation cache.</param>
        </member>
        <member name="M:Ninject.Activation.Strategies.ActivationCacheStrategy.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.ActivationCacheStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Contributes to the activation of the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="M:Ninject.Activation.Strategies.ActivationCacheStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Contributes to the deactivation of the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being deactivated.</param>
        </member>
        <member name="P:Ninject.Activation.Strategies.ActivationCacheStrategy.Settings">
            <summary>
            Gets or sets the settings.
            </summary>
            <value>The ninject settings.</value>
        </member>
        <member name="T:Ninject.Activation.Strategies.ActivationStrategy">
            <summary>
            Contributes to a <see cref="T:Ninject.Activation.IPipeline"/>, and is called during the activation
            and deactivation of an instance.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.ActivationStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Contributes to the activation of the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="M:Ninject.Activation.Strategies.ActivationStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Contributes to the deactivation of the instance in the specified context.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being deactivated.</param>
        </member>
        <member name="T:Ninject.Activation.Strategies.BindingActionStrategy">
            <summary>
            Executes actions defined on the binding during activation and deactivation.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.BindingActionStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Calls the activation actions defined on the binding.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="M:Ninject.Activation.Strategies.BindingActionStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Calls the deactivation actions defined on the binding.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being deactivated.</param>
        </member>
        <member name="T:Ninject.Activation.Strategies.DisposableStrategy">
            <summary>
            During deactivation, disposes instances that implement <see cref="T:System.IDisposable"/>.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.DisposableStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Disposes the specified instance.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being deactivated.</param>
        </member>
        <member name="T:Ninject.Activation.Strategies.InitializableStrategy">
            <summary>
            During activation, initializes instances that implement <see cref="T:Ninject.IInitializable"/>.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.InitializableStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Initializes the specified instance.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="T:Ninject.Activation.Strategies.MethodInjectionStrategy">
            <summary>
            Injects methods on an instance during activation.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.MethodInjectionStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Injects values into the properties as described by <see cref="T:Ninject.Planning.Directives.MethodInjectionDirective"/>s
            contained in the plan.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="T:Ninject.Activation.Strategies.PropertyInjectionStrategy">
            <summary>
            Injects properties on an instance during activation.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.PropertyInjectionStrategy.#ctor(Ninject.Injection.IInjectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Activation.Strategies.PropertyInjectionStrategy"/> class.
            </summary>
            <param name="injectorFactory">The injector factory component.</param>
        </member>
        <member name="M:Ninject.Activation.Strategies.PropertyInjectionStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Injects values into the properties as described by <see cref="T:Ninject.Planning.Directives.PropertyInjectionDirective"/>s
            contained in the plan.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="M:Ninject.Activation.Strategies.PropertyInjectionStrategy.AssignProperyOverrides(Ninject.Activation.IContext,Ninject.Activation.InstanceReference,System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter})">
            <summary>
            Applies user supplied override values to instance properties.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
            <param name="propertyValues">The parameter ovverride value accessors.</param>
        </member>
        <member name="M:Ninject.Activation.Strategies.PropertyInjectionStrategy.GetValue(Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>
            Gets the value to inject into the specified target.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>The value to inject into the specified target.</returns>
        </member>
        <member name="P:Ninject.Activation.Strategies.PropertyInjectionStrategy.InjectorFactory">
            <summary>
            Gets the injector factory component.
            </summary>
        </member>
        <member name="T:Ninject.Activation.Strategies.StartableStrategy">
            <summary>
            Starts instances that implement <see cref="T:Ninject.IStartable"/> during activation,
            and stops them during deactivation.
            </summary>
        </member>
        <member name="M:Ninject.Activation.Strategies.StartableStrategy.Activate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Starts the specified instance.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being activated.</param>
        </member>
        <member name="M:Ninject.Activation.Strategies.StartableStrategy.Deactivate(Ninject.Activation.IContext,Ninject.Activation.InstanceReference)">
            <summary>
            Stops the specified instance.
            </summary>
            <param name="context">The context.</param>
            <param name="reference">A reference to the instance being deactivated.</param>
        </member>
        <member name="T:Ninject.Components.ComponentContainer">
            <summary>
            An internal container that manages and resolves components that contribute to Ninject.
            </summary>
        </member>
        <member name="M:Ninject.Components.ComponentContainer.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:Ninject.Components.ComponentContainer.Add``2">
            <summary>
            Registers a component in the container.
            </summary>
            <typeparam name="TComponent">The component type.</typeparam>
            <typeparam name="TImplementation">The component's implementation type.</typeparam>
        </member>
        <member name="M:Ninject.Components.ComponentContainer.AddTransient``2">
            <summary>
            Registers a transient component in the container.
            </summary>
            <typeparam name="TComponent">The component type.</typeparam>
            <typeparam name="TImplementation">The component's implementation type.</typeparam>
        </member>
        <member name="M:Ninject.Components.ComponentContainer.RemoveAll``1">
            <summary>
            Removes all registrations for the specified component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
        </member>
        <member name="M:Ninject.Components.ComponentContainer.RemoveAll(System.Type)">
            <summary>
            Removes all registrations for the specified component.
            </summary>
            <param name="component">The component type.</param>
        </member>
        <member name="M:Ninject.Components.ComponentContainer.Get``1">
            <summary>
            Gets one instance of the specified component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>The instance of the component.</returns>
        </member>
        <member name="M:Ninject.Components.ComponentContainer.GetAll``1">
            <summary>
            Gets all available instances of the specified component.
            </summary>
            <typeparam name="T">The component type.</typeparam>
            <returns>A series of instances of the specified component.</returns>
        </member>
        <member name="M:Ninject.Components.ComponentContainer.Get(System.Type)">
            <summary>
            Gets one instance of the specified component.
            </summary>
            <param name="component">The component type.</param>
            <returns>The instance of the component.</returns>
        </member>
        <member name="M:Ninject.Components.ComponentContainer.GetAll(System.Type)">
            <summary>
            Gets all available instances of the specified component.
            </summary>
            <param name="component">The component type.</param>
            <returns>A series of instances of the specified component.</returns>
        </member>
        <member name="P:Ninject.Components.ComponentContainer.Kernel">
            <summary>
            Gets or sets the kernel that owns the component container.
            </summary>
        </member>
        <member name="T:Ninject.GlobalKernelRegistration">
            <summary>
            Allows to register kernel globally to perform some tasks on all kernels.
            The registration is done by loading the GlobalKernelRegistrationModule to the kernel.
            </summary>
        </member>
        <member name="M:Ninject.GlobalKernelRegistration.MapKernels(System.Action{Ninject.IKernel})">
            <summary>
            Performs an action on all registered kernels.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="T:Ninject.GlobalKernelRegistrationModule`1">
            <summary>
            Registers the kernel into which the module is loaded on the GlobalKernelRegistry using the
            type specified by TGlobalKernelRegistry.
            </summary>
            <typeparam name="TGlobalKernelRegistry">The type that is used to register the kernel.</typeparam>
        </member>
        <member name="M:Ninject.GlobalKernelRegistrationModule`1.Load">
            <summary>
            Loads the module into the kernel.
            </summary>
        </member>
        <member name="M:Ninject.GlobalKernelRegistrationModule`1.Unload">
            <summary>
            Unloads the module from the kernel.
            </summary>
        </member>
        <member name="T:Ninject.Infrastructure.Future`1">
            <summary>
            Represents a future value.
            </summary>
            <typeparam name="T">The type of value.</typeparam>
        </member>
        <member name="M:Ninject.Infrastructure.Future`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new instance of the Future&lt;T&gt; class.
            </summary>
            <param name="callback">The callback that will be triggered to read the value.</param>
        </member>
        <member name="M:Ninject.Infrastructure.Future`1.op_Implicit(Ninject.Infrastructure.Future{`0})~`0">
            <summary>
            Gets the value from the future.
            </summary>
            <param name="future">The future.</param>
            <returns>The future value.</returns>
        </member>
        <member name="P:Ninject.Infrastructure.Future`1.Value">
            <summary>
            Gets the value, resolving it if necessary.
            </summary>
        </member>
        <member name="P:Ninject.Infrastructure.Future`1.Callback">
            <summary>
            Gets the callback that will be called to resolve the value.
            </summary>
        </member>
        <member name="T:Ninject.Infrastructure.Introspection.FormatExtensionsEx">
            <summary>
            Provides extension methods for string formatting
            </summary>
        </member>
        <member name="M:Ninject.Infrastructure.Introspection.FormatExtensionsEx.Format(Ninject.Activation.IRequest)">
            <summary>
            Formats the specified request into a meaningful string representation.
            </summary>
            <param name="request">The request to be formatted.</param>
            <returns>The request formatted as string.</returns>
        </member>
        <member name="M:Ninject.Infrastructure.Introspection.FormatExtensionsEx.Format(Ninject.Planning.Targets.ITarget)">
            <summary>
            Formats the specified target into a meaningful string representation..
            </summary>
            <param name="target">The target to be formatted.</param>
            <returns>The target formatted as string.</returns>
        </member>
        <member name="T:Ninject.Infrastructure.Language.ExtensionsForMemberInfo">
            <summary>
            Extensions for MemberInfo
            </summary>
        </member>
        <member name="M:Ninject.Infrastructure.Language.ExtensionsForMemberInfo.HasAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            Determines whether the specified member has attribute.
            </summary>
            <typeparam name="T">The type of the attribute.</typeparam>
            <param name="member">The member.</param>
            <returns>
            	<c>true</c> if the specified member has attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ninject.Infrastructure.Language.ExtensionsForMemberInfo.HasAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            Determines whether the specified member has attribute.
            </summary>
            <param name="member">The member.</param>
            <param name="type">The type of the attribute.</param>
            <returns>
            	<c>true</c> if the specified member has attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ninject.Infrastructure.Language.ExtensionsForMemberInfo.GetPropertyFromDeclaredType(System.Reflection.MemberInfo,System.Reflection.PropertyInfo)">
            <summary>
            Gets the property info from its declared tpe.
            </summary>
            <param name="memberInfo">The member info.</param>
            <param name="propertyDefinition">The property definition.</param>
            <param name="flags">The flags.</param>
            <returns>The property info from the declared type of the property.</returns>
        </member>
        <member name="M:Ninject.Infrastructure.Language.ExtensionsForMemberInfo.IsPrivate(System.Reflection.PropertyInfo)">
            <summary>
            Determines whether the specified property info is private.
            </summary>
            <param name="propertyInfo">The property info.</param>
            <returns>
            	<c>true</c> if the specified property info is private; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ninject.Infrastructure.Language.ExtensionsForMemberInfo.GetCustomAttributesExtended(System.Reflection.MemberInfo,System.Type,System.Boolean)">
            <summary>
            Gets the custom attributes.
            This version is able to get custom attributes for properties from base types even if the property is none public.
            </summary>
            <param name="member">The member.</param>
            <param name="attributeType">Type of the attribute.</param>
            <param name="inherited">if set to <c>true</c> [inherited].</param>
            <returns></returns>
        </member>
        <member name="T:Ninject.Injection.ReflectionInjectorFactory">
            <summary>
            Creates injectors from members via reflective invocation.
            </summary>
        </member>
        <member name="M:Ninject.Injection.ReflectionInjectorFactory.Create(System.Reflection.ConstructorInfo)">
            <summary>
            Gets or creates an injector for the specified constructor.
            </summary>
            <param name="constructor">The constructor.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="M:Ninject.Injection.ReflectionInjectorFactory.Create(System.Reflection.PropertyInfo)">
            <summary>
            Gets or creates an injector for the specified property.
            </summary>
            <param name="property">The property.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="M:Ninject.Injection.ReflectionInjectorFactory.Create(System.Reflection.MethodInfo)">
            <summary>
            Gets or creates an injector for the specified method.
            </summary>
            <param name="method">The method.</param>
            <returns>The created injector.</returns>
        </member>
        <member name="T:Ninject.KernelBase">
            <summary>
            The base implementation of an <see cref="T:Ninject.IKernel"/>.
            </summary>
        </member>
        <member name="F:Ninject.KernelBase.HandleMissingBindingLockObject">
            <summary>
            Lock used when adding missing bindings.
            </summary>
        </member>
        <member name="M:Ninject.KernelBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.KernelBase"/> class.
            </summary>
        </member>
        <member name="M:Ninject.KernelBase.#ctor(Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.KernelBase"/> class.
            </summary>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.KernelBase.#ctor(Ninject.INinjectSettings,Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.KernelBase"/> class.
            </summary>
            <param name="settings">The configuration to use.</param>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.KernelBase.#ctor(Ninject.Components.IComponentContainer,Ninject.INinjectSettings,Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.KernelBase"/> class.
            </summary>
            <param name="components">The component container to use.</param>
            <param name="settings">The configuration to use.</param>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.KernelBase.Dispose(System.Boolean)">
            <summary>
            Releases resources held by the object.
            </summary>
        </member>
        <member name="M:Ninject.KernelBase.Unbind(System.Type)">
            <summary>
            Unregisters all bindings for the specified service.
            </summary>
            <param name="service">The service to unbind.</param>
        </member>
        <member name="M:Ninject.KernelBase.AddBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>
            Registers the specified binding.
            </summary>
            <param name="binding">The binding to add.</param>
        </member>
        <member name="M:Ninject.KernelBase.RemoveBinding(Ninject.Planning.Bindings.IBinding)">
            <summary>
            Unregisters the specified binding.
            </summary>
            <param name="binding">The binding to remove.</param>
        </member>
        <member name="M:Ninject.KernelBase.HasModule(System.String)">
            <summary>
            Determines whether a module with the specified name has been loaded in the kernel.
            </summary>
            <param name="name">The name of the module.</param>
            <returns><c>True</c> if the specified module has been loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ninject.KernelBase.GetModules">
            <summary>
            Gets the modules that have been loaded into the kernel.
            </summary>
            <returns>A series of loaded modules.</returns>
        </member>
        <member name="M:Ninject.KernelBase.Load(System.Collections.Generic.IEnumerable{Ninject.Modules.INinjectModule})">
            <summary>
            Loads the module(s) into the kernel.
            </summary>
            <param name="m">The modules to load.</param>
        </member>
        <member name="M:Ninject.KernelBase.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads modules from the files that match the specified pattern(s).
            </summary>
            <param name="filePatterns">The file patterns (i.e. "*.dll", "modules/*.rb") to match.</param>
        </member>
        <member name="M:Ninject.KernelBase.LoadAsync(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads modules from the files that match the specified pattern(s).
            </summary>
            <param name="filePatterns">The file patterns (i.e. "*.dll", "modules/*.rb") to match.</param>
        </member>
        <member name="M:Ninject.KernelBase.Load(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Loads modules defined in the specified assemblies.
            </summary>
            <param name="assemblies">The assemblies to search.</param>
        </member>
        <member name="M:Ninject.KernelBase.Unload(System.String)">
            <summary>
            Unloads the plugin with the specified name.
            </summary>
            <param name="name">The plugin's name.</param>
        </member>
        <member name="M:Ninject.KernelBase.Inject(System.Object,Ninject.Parameters.IParameter[])">
            <summary>
            Injects the specified existing instance, without managing its lifecycle.
            </summary>
            <param name="instance">The instance to inject.</param>
            <param name="parameters">The parameters to pass to the request.</param>
        </member>
        <member name="M:Ninject.KernelBase.Release(System.Object)">
            <summary>
            Deactivates and releases the specified instance if it is currently managed by Ninject.
            </summary>
            <param name="instance">The instance to release.</param>
            <returns><see langword="True"/> if the instance was found and released; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.KernelBase.CanResolve(Ninject.Activation.IRequest)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="request">The request.</param>
            <returns><c>True</c> if the request can be resolved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ninject.KernelBase.CanResolve(Ninject.Activation.IRequest,System.Boolean)">
            <summary>
            Determines whether the specified request can be resolved.
            </summary>
            <param name="request">The request.</param>
            <param name="ignoreImplicitBindings">if set to <c>true</c> implicit bindings are ignored.</param>
            <returns>
                <c>True</c> if the request can be resolved; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ninject.KernelBase.Resolve(Ninject.Activation.IRequest)">
            <summary>
            Resolves instances for the specified request. The instances are not actually resolved
            until a consumer iterates over the enumerator.
            </summary>
            <param name="request">The request to resolve.</param>
            <returns>An enumerator of instances that match the request.</returns>
        </member>
        <member name="M:Ninject.KernelBase.CreateRequest(System.Type,System.Func{Ninject.Planning.Bindings.IBindingMetadata,System.Boolean},System.Collections.Generic.IEnumerable{Ninject.Parameters.IParameter},System.Boolean,System.Boolean)">
            <summary>
            Creates a request for the specified service.
            </summary>
            <param name="service">The service that is being requested.</param>
            <param name="constraint">The constraint to apply to the bindings to determine if they match the request.</param>
            <param name="parameters">The parameters to pass to the resolution.</param>
            <param name="isOptional"><c>True</c> if the request is optional; otherwise, <c>false</c>.</param>
            <param name="isUnique"><c>True</c> if the request should return a unique result; otherwise, <c>false</c>.</param>
            <returns>The created request.</returns>
        </member>
        <member name="M:Ninject.KernelBase.BeginBlock">
            <summary>
            Begins a new activation block, which can be used to deterministically dispose resolved instances.
            </summary>
            <returns>The new activation block.</returns>
        </member>
        <member name="M:Ninject.KernelBase.GetBindings(System.Type)">
            <summary>
            Gets the bindings registered for the specified service.
            </summary>
            <param name="service">The service in question.</param>
            <returns>A series of bindings that are registered for the service.</returns>
        </member>
        <member name="M:Ninject.KernelBase.GetBindingPrecedenceComparer">
            <summary>
            Returns an IComparer that is used to determine resolution precedence.
            </summary>
            <returns>An IComparer that is used to determine resolution precedence.</returns>
        </member>
        <member name="M:Ninject.KernelBase.SatifiesRequest(Ninject.Activation.IRequest)">
            <summary>
            Returns a predicate that can determine if a given IBinding matches the request.
            </summary>
            <param name="request">The request/</param>
            <returns>A predicate that can determine if a given IBinding matches the request.</returns>
        </member>
        <member name="M:Ninject.KernelBase.AddComponents">
            <summary>
            Adds components to the kernel during startup.
            </summary>
        </member>
        <member name="M:Ninject.KernelBase.HandleMissingBinding(System.Type)">
            <summary>
            Attempts to handle a missing binding for a service.
            </summary>
            <param name="service">The service.</param>
            <returns><c>True</c> if the missing binding can be handled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ninject.KernelBase.HandleMissingBinding(Ninject.Activation.IRequest)">
            <summary>
            Attempts to handle a missing binding for a request.
            </summary>
            <param name="request">The request.</param>
            <returns><c>True</c> if the missing binding can be handled; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ninject.KernelBase.TypeIsSelfBindable(System.Type)">
            <summary>
            Returns a value indicating whether the specified service is self-bindable.
            </summary>
            <param name="service">The service.</param>
            <returns><see langword="True"/> if the type is self-bindable; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.KernelBase.CreateContext(Ninject.Activation.IRequest,Ninject.Planning.Bindings.IBinding)">
            <summary>
            Creates a context for the specified request and binding.
            </summary>
            <param name="request">The request.</param>
            <param name="binding">The binding.</param>
            <returns>The created context.</returns>
        </member>
        <member name="P:Ninject.KernelBase.Settings">
            <summary>
            Gets the kernel settings.
            </summary>
        </member>
        <member name="P:Ninject.KernelBase.Components">
            <summary>
            Gets the component container, which holds components that contribute to Ninject.
            </summary>
        </member>
        <member name="T:Ninject.Modules.AssemblyNameRetriever">
            <summary>
            Retrieves assembly names from file names using a temporary app domain.
            </summary>
        </member>
        <member name="T:Ninject.Modules.IAssemblyNameRetriever">
            <summary>
            Retrieves assembly names from file names using a temporary app domain.
            </summary>
        </member>
        <member name="M:Ninject.Modules.IAssemblyNameRetriever.GetAssemblyNames(System.Collections.Generic.IEnumerable{System.String},System.Predicate{System.Reflection.Assembly})">
            <summary>
            Gets all assembly names of the assemblies in the given files that match the filter.
            </summary>
            <param name="filenames">The filenames.</param>
            <param name="filter">The filter.</param>
            <returns>All assembly names of the assemblies in the given files that match the filter.</returns>
        </member>
        <member name="M:Ninject.Modules.AssemblyNameRetriever.GetAssemblyNames(System.Collections.Generic.IEnumerable{System.String},System.Predicate{System.Reflection.Assembly})">
            <summary>
            Gets all assembly names of the assemblies in the given files that match the filter.
            </summary>
            <param name="filenames">The filenames.</param>
            <param name="filter">The filter.</param>
            <returns>All assembly names of the assemblies in the given files that match the filter.</returns>
        </member>
        <member name="T:Ninject.Modules.CompiledModuleLoaderPlugin">
            <summary>
            Loads modules from compiled assemblies.
            </summary>
        </member>
        <member name="T:Ninject.Modules.IModuleLoaderPlugin">
            <summary>
            Loads modules at runtime by searching external files.
            </summary>
        </member>
        <member name="M:Ninject.Modules.IModuleLoaderPlugin.LoadModules(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads modules from the specified files.
            </summary>
            <param name="filenames">The names of the files to load modules from.</param>
        </member>
        <member name="P:Ninject.Modules.IModuleLoaderPlugin.SupportedExtensions">
            <summary>
            Gets the file extensions that the plugin understands how to load.
            </summary>
        </member>
        <member name="F:Ninject.Modules.CompiledModuleLoaderPlugin.assemblyNameRetriever">
            <summary>
            The assembly name retriever.
            </summary>
        </member>
        <member name="F:Ninject.Modules.CompiledModuleLoaderPlugin.Extensions">
            <summary>
            The file extensions that are supported.
            </summary>
        </member>
        <member name="M:Ninject.Modules.CompiledModuleLoaderPlugin.#ctor(Ninject.IKernel,Ninject.Modules.IAssemblyNameRetriever)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Modules.CompiledModuleLoaderPlugin"/> class.
            </summary>
            <param name="kernel">The kernel into which modules will be loaded.</param>
            <param name="assemblyNameRetriever">The assembly name retriever.</param>
        </member>
        <member name="M:Ninject.Modules.CompiledModuleLoaderPlugin.LoadModules(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads modules from the specified files.
            </summary>
            <param name="filenames">The names of the files to load modules from.</param>
        </member>
        <member name="P:Ninject.Modules.CompiledModuleLoaderPlugin.Kernel">
            <summary>
            Gets the kernel into which modules will be loaded.
            </summary>
        </member>
        <member name="P:Ninject.Modules.CompiledModuleLoaderPlugin.SupportedExtensions">
            <summary>
            Gets the file extensions that the plugin understands how to load.
            </summary>
        </member>
        <member name="T:Ninject.Modules.IModuleLoader">
            <summary>
            Finds modules defined in external files.
            </summary>
        </member>
        <member name="M:Ninject.Modules.IModuleLoader.LoadModules(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads any modules found in the files that match the specified patterns.
            </summary>
            <param name="patterns">The patterns to search.</param>
        </member>
        <member name="T:Ninject.Modules.ModuleLoader">
            <summary>
            Automatically finds and loads modules from assemblies.
            </summary>
        </member>
        <member name="M:Ninject.Modules.ModuleLoader.#ctor(Ninject.IKernel)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Modules.ModuleLoader"/> class.
            </summary>
            <param name="kernel">The kernel into which modules will be loaded.</param>
        </member>
        <member name="M:Ninject.Modules.ModuleLoader.LoadModules(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads any modules found in the files that match the specified patterns.
            </summary>
            <param name="patterns">The patterns to search.</param>
        </member>
        <member name="P:Ninject.Modules.ModuleLoader.Kernel">
            <summary>
            Gets or sets the kernel into which modules will be loaded.
            </summary>
        </member>
        <member name="T:Ninject.NinjectSettings">
            <summary>
            Contains configuration options for Ninject.
            </summary>
        </member>
        <member name="M:Ninject.NinjectSettings.#ctor">
            <summary>
            Creates a settings object
            </summary>
        </member>
        <member name="M:Ninject.NinjectSettings.Get``1(System.String,``0)">
            <summary>
            Gets the value for the specified key.
            </summary>
            <typeparam name="T">The type of value to return.</typeparam>
            <param name="key">The setting's key.</param>
            <param name="defaultValue">The value to return if no setting is available.</param>
            <returns>The value, or the default value if none was found.</returns>
        </member>
        <member name="M:Ninject.NinjectSettings.Set(System.String,System.Object)">
            <summary>
            Sets the value for the specified key.
            </summary>
            <param name="key">The setting's key.</param>
            <param name="value">The setting's value.</param>
        </member>
        <member name="P:Ninject.NinjectSettings.InjectAttribute">
            <summary>
            Gets or sets the attribute that indicates that a member should be injected.
            </summary>
        </member>
        <member name="P:Ninject.NinjectSettings.CachePruningInterval">
            <summary>
            Gets or sets the interval at which the GC should be polled.
            </summary>
        </member>
        <member name="P:Ninject.NinjectSettings.DefaultScopeCallback">
            <summary>
            Gets or sets the default scope callback.
            </summary>
        </member>
        <member name="P:Ninject.NinjectSettings.LoadExtensions">
            <summary>
            Gets or sets a value indicating whether the kernel should automatically load extensions at startup.
            </summary>
        </member>
        <member name="P:Ninject.NinjectSettings.ExtensionSearchPatterns">
            <summary>
            Gets or sets the paths that should be searched for extensions.
            </summary>
        </member>
        <member name="P:Ninject.NinjectSettings.UseReflectionBasedInjection">
            <summary>
            Gets a value indicating whether Ninject should use reflection-based injection instead of
            the (usually faster) lightweight code generation system.
            </summary>
        </member>
        <member name="P:Ninject.NinjectSettings.InjectNonPublic">
            <summary>
            Gets a value indicating whether Ninject should inject non public members.
            </summary>
        </member>
        <member name="P:Ninject.NinjectSettings.InjectParentPrivateProperties">
            <summary>
            Gets a value indicating whether Ninject should inject private properties of base classes.
            </summary>
            <remarks>
            Activating this setting has an impact on the performance. It is recomended not
            to use this feature and use constructor injection instead.
            </remarks>
        </member>
        <member name="P:Ninject.NinjectSettings.ActivationCacheDisabled">
            <summary>
            Gets or sets a value indicating whether the activation cache is disabled.
            If the activation cache is disabled less memory is used. But in some cases
            instances are activated or deactivated multiple times. e.g. in the following scenario:
            Bind{A}().ToSelf();
            Bind{IA}().ToMethod(ctx =&gt; kernel.Get{IA}();
            </summary>
            <value>
            	<c>true</c> if activation cache is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Ninject.NinjectSettings.AllowNullInjection">
            <summary>
            Gets or sets a value indicating whether Null is a valid value for injection.
            By default this is disabled and whenever a provider returns null an exception is thrown.
            </summary>
            <value>
            	<c>true</c> if null is allowed as injected value otherwise false.
            </value>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.DefaultValueBindingResolver">
            <summary>
            </summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.DefaultValueBindingResolver.Resolve(Ninject.Infrastructure.Multimap{System.Type,Ninject.Planning.Bindings.IBinding},Ninject.Activation.IRequest)">
            <summary>
            Returns any bindings from the specified collection that match the specified service.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="request">The service in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver">
            <summary>
            Resolves bindings for open generic types.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.OpenGenericBindingResolver.Resolve(Ninject.Infrastructure.Multimap{System.Type,Ninject.Planning.Bindings.IBinding},System.Type)">
            <summary>
            Returns any bindings from the specified collection that match the specified service.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="service">The service in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.SelfBindingResolver">
            <summary>
            </summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.SelfBindingResolver.Resolve(Ninject.Infrastructure.Multimap{System.Type,Ninject.Planning.Bindings.IBinding},Ninject.Activation.IRequest)">
            <summary>
            Returns any bindings from the specified collection that match the specified service.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="request">The service in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.SelfBindingResolver.TypeIsSelfBindable(System.Type)">
            <summary>
            Returns a value indicating whether the specified service is self-bindable.
            </summary>
            <param name="service">The service.</param>
            <returns><see langword="True"/> if the type is self-bindable; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:Ninject.Planning.Bindings.Resolvers.StandardBindingResolver">
            <summary>
            Resolves bindings that have been registered directly for the service.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Bindings.Resolvers.StandardBindingResolver.Resolve(Ninject.Infrastructure.Multimap{System.Type,Ninject.Planning.Bindings.IBinding},System.Type)">
            <summary>
            Returns any bindings from the specified collection that match the specified service.
            </summary>
            <param name="bindings">The multimap of all registered bindings.</param>
            <param name="service">The service in question.</param>
            <returns>The series of matching bindings.</returns>
        </member>
        <member name="T:Ninject.Planning.Directives.ConstructorInjectionDirective">
            <summary>
            Describes the injection of a constructor.
            </summary>
        </member>
        <member name="T:Ninject.Planning.Directives.MethodInjectionDirectiveBase`2">
            <summary>
            Describes the injection of a method or constructor.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Directives.MethodInjectionDirectiveBase`2.#ctor(`0,`1)">
            <summary>
            Initializes a new instance of the MethodInjectionDirectiveBase&lt;TMethod, TInjector&gt; class.
            </summary>
            <param name="method">The method this directive represents.</param>
            <param name="injector">The injector that will be triggered.</param>
        </member>
        <member name="M:Ninject.Planning.Directives.MethodInjectionDirectiveBase`2.CreateTargetsFromParameters(`0)">
            <summary>
            Creates targets for the parameters of the method.
            </summary>
            <param name="method">The method.</param>
            <returns>The targets for the method's parameters.</returns>
        </member>
        <member name="P:Ninject.Planning.Directives.MethodInjectionDirectiveBase`2.Injector">
            <summary>
            Gets or sets the injector that will be triggered.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Directives.MethodInjectionDirectiveBase`2.Targets">
            <summary>
            Gets or sets the targets for the directive.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Directives.ConstructorInjectionDirective.#ctor(System.Reflection.ConstructorInfo,Ninject.Injection.ConstructorInjector)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Planning.Directives.ConstructorInjectionDirective"/> class.
            </summary>
            <param name="constructor">The constructor described by the directive.</param>
            <param name="injector">The injector that will be triggered.</param>
        </member>
        <member name="P:Ninject.Planning.Directives.ConstructorInjectionDirective.Constructor">
            <summary>
            The base .ctor definition.
            </summary>
        </member>
        <member name="T:Ninject.Planning.Directives.MethodInjectionDirective">
            <summary>
            Describes the injection of a method.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Directives.MethodInjectionDirective.#ctor(System.Reflection.MethodInfo,Ninject.Injection.MethodInjector)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Planning.Directives.MethodInjectionDirective"/> class.
            </summary>
            <param name="method">The method described by the directive.</param>
            <param name="injector">The injector that will be triggered.</param>
        </member>
        <member name="T:Ninject.Planning.Directives.PropertyInjectionDirective">
            <summary>
            Describes the injection of a property.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Directives.PropertyInjectionDirective.#ctor(System.Reflection.PropertyInfo,Ninject.Injection.PropertyInjector)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Planning.Directives.PropertyInjectionDirective"/> class.
            </summary>
            <param name="member">The member the directive describes.</param>
            <param name="injector">The injector that will be triggered.</param>
        </member>
        <member name="M:Ninject.Planning.Directives.PropertyInjectionDirective.CreateTarget(System.Reflection.PropertyInfo)">
            <summary>
            Creates a target for the property.
            </summary>
            <param name="propertyInfo">The property.</param>
            <returns>The target for the property.</returns>
        </member>
        <member name="P:Ninject.Planning.Directives.PropertyInjectionDirective.Injector">
            <summary>
            Gets or sets the injector that will be triggered.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Directives.PropertyInjectionDirective.Target">
            <summary>
            Gets or sets the injection target for the directive.
            </summary>
        </member>
        <member name="T:Ninject.Planning.Plan">
            <summary>
            Describes the means by which a type should be activated.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Plan.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Planning.Plan"/> class.
            </summary>
            <param name="type">The type the plan describes.</param>
        </member>
        <member name="M:Ninject.Planning.Plan.Add(Ninject.Planning.Directives.IDirective)">
            <summary>
            Adds the specified directive to the plan.
            </summary>
            <param name="directive">The directive.</param>
        </member>
        <member name="M:Ninject.Planning.Plan.Has``1">
            <summary>
            Determines whether the plan contains one or more directives of the specified type.
            </summary>
            <typeparam name="TDirective">The type of directive.</typeparam>
            <returns><c>True</c> if the plan has one or more directives of the type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Ninject.Planning.Plan.GetOne``1">
            <summary>
            Gets the first directive of the specified type from the plan.
            </summary>
            <typeparam name="TDirective">The type of directive.</typeparam>
            <returns>The first directive, or <see langword="null"/> if no matching directives exist.</returns>
        </member>
        <member name="M:Ninject.Planning.Plan.GetAll``1">
            <summary>
            Gets all directives of the specified type that exist in the plan.
            </summary>
            <typeparam name="TDirective">The type of directive.</typeparam>
            <returns>A series of directives of the specified type.</returns>
        </member>
        <member name="P:Ninject.Planning.Plan.Type">
            <summary>
            Gets the type that the plan describes.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Plan.Directives">
            <summary>
            Gets the directives defined in the plan.
            </summary>
        </member>
        <member name="T:Ninject.Planning.Planner">
            <summary>
            Generates plans for how to activate instances.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Planner.#ctor(System.Collections.Generic.IEnumerable{Ninject.Planning.Strategies.IPlanningStrategy})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Planning.Planner"/> class.
            </summary>
            <param name="strategies">The strategies to execute during planning.</param>
        </member>
        <member name="M:Ninject.Planning.Planner.GetPlan(System.Type)">
            <summary>
            Gets or creates an activation plan for the specified type.
            </summary>
            <param name="type">The type for which a plan should be created.</param>
            <returns>The type's activation plan.</returns>
        </member>
        <member name="M:Ninject.Planning.Planner.CreateEmptyPlan(System.Type)">
            <summary>
            Creates an empty plan for the specified type.
            </summary>
            <param name="type">The type for which a plan should be created.</param>
            <returns>The created plan.</returns>
        </member>
        <member name="M:Ninject.Planning.Planner.CreateNewPlan(System.Type)">
            <summary>
            Creates a new plan for the specified type.
            This method requires an active reader lock!
            </summary>
            <param name="type">The type.</param>
            <returns>The newly created plan.</returns>
        </member>
        <member name="P:Ninject.Planning.Planner.Strategies">
            <summary>
            Gets the strategies that contribute to the planning process.
            </summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.ConstructorReflectionStrategy">
            <summary>
            Adds a directive to plans indicating which constructor should be injected during activation.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.ConstructorReflectionStrategy.#ctor(Ninject.Selection.ISelector,Ninject.Injection.IInjectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Planning.Strategies.ConstructorReflectionStrategy"/> class.
            </summary>
            <param name="selector">The selector component.</param>
            <param name="injectorFactory">The injector factory component.</param>
        </member>
        <member name="M:Ninject.Planning.Strategies.ConstructorReflectionStrategy.Execute(Ninject.Planning.IPlan)">
            <summary>
            Adds a <see cref="T:Ninject.Planning.Directives.ConstructorInjectionDirective"/> to the plan for the constructor
            that should be injected.
            </summary>
            <param name="plan">The plan that is being generated.</param>
        </member>
        <member name="P:Ninject.Planning.Strategies.ConstructorReflectionStrategy.Selector">
            <summary>
            Gets the selector component.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.ConstructorReflectionStrategy.InjectorFactory">
            <summary>
            Gets the injector factory component.
            </summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.MethodReflectionStrategy">
            <summary>
            Adds directives to plans indicating which methods should be injected during activation.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.MethodReflectionStrategy.#ctor(Ninject.Selection.ISelector,Ninject.Injection.IInjectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Planning.Strategies.MethodReflectionStrategy"/> class.
            </summary>
            <param name="selector">The selector component.</param>
            <param name="injectorFactory">The injector factory component.</param>
        </member>
        <member name="M:Ninject.Planning.Strategies.MethodReflectionStrategy.Execute(Ninject.Planning.IPlan)">
            <summary>
            Adds a <see cref="T:Ninject.Planning.Directives.MethodInjectionDirective"/> to the plan for each method
            that should be injected.
            </summary>
            <param name="plan">The plan that is being generated.</param>
        </member>
        <member name="P:Ninject.Planning.Strategies.MethodReflectionStrategy.Selector">
            <summary>
            Gets the selector component.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.MethodReflectionStrategy.InjectorFactory">
            <summary>
            Gets the injector factory component.
            </summary>
        </member>
        <member name="T:Ninject.Planning.Strategies.PropertyReflectionStrategy">
            <summary>
            Adds directives to plans indicating which properties should be injected during activation.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Strategies.PropertyReflectionStrategy.#ctor(Ninject.Selection.ISelector,Ninject.Injection.IInjectorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Planning.Strategies.PropertyReflectionStrategy"/> class.
            </summary>
            <param name="selector">The selector component.</param>
            <param name="injectorFactory">The injector factory component.</param>
        </member>
        <member name="M:Ninject.Planning.Strategies.PropertyReflectionStrategy.Execute(Ninject.Planning.IPlan)">
            <summary>
            Adds a <see cref="T:Ninject.Planning.Directives.PropertyInjectionDirective"/> to the plan for each property
            that should be injected.
            </summary>
            <param name="plan">The plan that is being generated.</param>
        </member>
        <member name="P:Ninject.Planning.Strategies.PropertyReflectionStrategy.Selector">
            <summary>
            Gets the selector component.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Strategies.PropertyReflectionStrategy.InjectorFactory">
            <summary>
            Gets the injector factory component.
            </summary>
        </member>
        <member name="T:Ninject.Planning.Targets.ITargetEx">
            <summary>
            Represents a site on a type where a value will be injected.
            </summary>
        </member>
        <member name="T:Ninject.Planning.Targets.ParameterTarget">
            <summary>
            Represents an injection target for a <see cref="T:System.Reflection.ParameterInfo"/>.
            </summary>
        </member>
        <member name="T:Ninject.Planning.Targets.Target">
            <summary>
            Represents a site on a type where a value can be injected.
            </summary>
            <typeparam name="T">The type of site this represents.</typeparam>
        </member>
        <member name="M:Ninject.Planning.Targets.Target.#ctor(System.Reflection.MemberInfo)">
            <summary>
            Initializes a new instance of the Target&lt;T&gt; class.
            </summary>
            <param name="member">The member that contains the target.</param>
            <param name="site">The site represented by the target.</param>
        </member>
        <member name="M:Ninject.Planning.Targets.Target.GetCustomAttributes(System.Type,System.Boolean)">
            <summary>
            Returns an array of custom attributes of a specified type defined on the target.
            </summary>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit">Whether to look up the hierarchy chain for inherited custom attributes.</param>
            <returns>An array of custom attributes of the specified type.</returns>
        </member>
        <member name="M:Ninject.Planning.Targets.Target.GetCustomAttributes(System.Boolean)">
            <summary>
            Returns an array of custom attributes defined on the target.
            </summary>
            <param name="inherit">Whether to look up the hierarchy chain for inherited custom attributes.</param>
            <returns>An array of custom attributes.</returns>
        </member>
        <member name="M:Ninject.Planning.Targets.Target.IsDefined(System.Type,System.Boolean)">
            <summary>
            Returns a value indicating whether an attribute of the specified type is defined on the target.
            </summary>
            <param name="attributeType">The type of attribute to search for.</param>
            <param name="inherit">Whether to look up the hierarchy chain for inherited custom attributes.</param>
            <returns><c>True</c> if such an attribute is defined; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Ninject.Planning.Targets.Target.IsDefinedOnParent(System.Type,System.Type)">
            <summary>
            Determines whether the parent has attribute.
            </summary>
            <param name="parent">The parent.</param>
            <param name="attributeType">The type of the attribute.</param>
            <returns>
            	<c>true</c> if the specified member has attribute; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Ninject.Planning.Targets.Target.ResolveWithin(Ninject.Activation.IContext)">
            <summary>
            Resolves a value for the target within the specified parent context.
            </summary>
            <param name="parent">The parent context.</param>
            <returns>The resolved value.</returns>
        </member>
        <member name="M:Ninject.Planning.Targets.Target.GetValues(System.Type,Ninject.Activation.IContext)">
            <summary>
            Gets the value(s) that should be injected into the target.
            </summary>
            <param name="service">The service that the target is requesting.</param>
            <param name="parent">The parent context in which the target is being injected.</param>
            <returns>A series of values that are available for injection.</returns>
        </member>
        <member name="M:Ninject.Planning.Targets.Target.GetValue(System.Type,Ninject.Activation.IContext)">
            <summary>
            Gets the value that should be injected into the target.
            </summary>
            <param name="service">The service that the target is requesting.</param>
            <param name="parent">The parent context in which the target is being injected.</param>
            <returns>The value that is to be injected.</returns>
        </member>
        <member name="M:Ninject.Planning.Targets.Target.ReadOptionalFromTarget">
            <summary>
            Reads whether the target represents an optional dependency.
            </summary>
            <returns><see langword="True"/> if it is optional; otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:Ninject.Planning.Targets.Target.ReadConstraintFromTarget">
            <summary>
            Reads the resolution constraint from target.
            </summary>
            <returns>The resolution constraint.</returns>
        </member>
        <member name="P:Ninject.Planning.Targets.Target.Member">
            <summary>
            Gets the member that contains the target.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Target.Name">
            <summary>
            Gets the name of the target.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Target.Type">
            <summary>
            Gets the type of the target.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Target.Constraint">
            <summary>
            Gets the constraint defined on the target.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Target.IsOptional">
            <summary>
            Gets a value indicating whether the target represents an optional dependency.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Target.HasDefaultValue">
            <summary>
            Gets a value indicating whether the target has a default value.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Targets.Target.DefaultValue">
            <summary>
            Gets the default value for the target.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the item does not have a default value.</exception>
        </member>
        <member name="M:Ninject.Planning.Targets.ParameterTarget.#ctor(System.Reflection.MethodBase,System.Reflection.ParameterInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Planning.Targets.ParameterTarget"/> class.
            </summary>
            <param name="method">The method that defines the parameter.</param>
            <param name="site">The parameter that this target represents.</param>
        </member>
        <member name="P:Ninject.Planning.Targets.ParameterTarget.Name">
            <summary>
            Gets the name of the target.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Targets.ParameterTarget.Type">
            <summary>
            Gets the type of the target.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Targets.ParameterTarget.HasDefaultValue">
            <summary>
            Gets a value indicating whether the target has a default value.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Targets.ParameterTarget.DefaultValue">
            <summary>
            Gets the default value for the target.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the item does not have a default value.</exception>
        </member>
        <member name="T:Ninject.Planning.Targets.PropertyTarget">
            <summary>
            Represents an injection target for a <see cref="T:System.Reflection.PropertyInfo"/>.
            </summary>
        </member>
        <member name="M:Ninject.Planning.Targets.PropertyTarget.#ctor(System.Reflection.PropertyInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Planning.Targets.PropertyTarget"/> class.
            </summary>
            <param name="site">The property that this target represents.</param>
        </member>
        <member name="P:Ninject.Planning.Targets.PropertyTarget.Name">
            <summary>
            Gets the name of the target.
            </summary>
        </member>
        <member name="P:Ninject.Planning.Targets.PropertyTarget.Type">
            <summary>
            Gets the type of the target.
            </summary>
        </member>
        <member name="T:Ninject.Selection.Heuristics.StandardConstructorScorer">
            <summary>
            Scores constructors by either looking for the existence of an injection marker
            attribute, or by counting the number of parameters.
            </summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.StandardConstructorScorer.Score(Ninject.Activation.IContext,Ninject.Planning.Directives.IConstructorInjectionDirective)">
            <summary>
            Gets the score for the specified constructor.
            </summary>
            <param name="context">The injection context.</param>
            <param name="directive">The constructor.</param>
            <returns>The constructor's score.</returns>
        </member>
        <member name="M:Ninject.Selection.Heuristics.StandardConstructorScorer.BindingExists(Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>
            Checkes whether a binding exists for a given target.
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>Whether a binding exists for the target in the given context.</returns>
        </member>
        <member name="M:Ninject.Selection.Heuristics.StandardConstructorScorer.ParameterExists(Ninject.Activation.IContext,Ninject.Planning.Targets.ITarget)">
            <summary>
            Checks whether any parameters exist for the geiven target..
            </summary>
            <param name="context">The context.</param>
            <param name="target">The target.</param>
            <returns>Whether a parameter exists for the target in the given context.</returns>
        </member>
        <member name="T:Ninject.Selection.Heuristics.StandardInjectionHeuristic">
            <summary>
            Determines whether members should be injected during activation by checking
            if they are decorated with an injection marker attribute.
            </summary>
        </member>
        <member name="M:Ninject.Selection.Heuristics.StandardInjectionHeuristic.ShouldInject(System.Reflection.MemberInfo)">
            <summary>
            Returns a value indicating whether the specified member should be injected.
            </summary>
            <param name="member">The member in question.</param>
            <returns><c>True</c> if the member should be injected; otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Ninject.Selection.Selector">
            <summary>
            Selects members for injection.
            </summary>
        </member>
        <member name="M:Ninject.Selection.Selector.#ctor(Ninject.Selection.Heuristics.IConstructorScorer,System.Collections.Generic.IEnumerable{Ninject.Selection.Heuristics.IInjectionHeuristic})">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.Selection.Selector"/> class.
            </summary>
            <param name="constructorScorer">The constructor scorer.</param>
            <param name="injectionHeuristics">The injection heuristics.</param>
        </member>
        <member name="M:Ninject.Selection.Selector.SelectConstructorsForInjection(System.Type)">
            <summary>
            Selects the constructor to call on the specified type, by using the constructor scorer.
            </summary>
            <param name="type">The type.</param>
            <returns>The selected constructor, or <see langword="null"/> if none were available.</returns>
        </member>
        <member name="M:Ninject.Selection.Selector.SelectPropertiesForInjection(System.Type)">
            <summary>
            Selects properties that should be injected.
            </summary>
            <param name="type">The type.</param>
            <returns>A series of the selected properties.</returns>
        </member>
        <member name="M:Ninject.Selection.Selector.SelectMethodsForInjection(System.Type)">
            <summary>
            Selects methods that should be injected.
            </summary>
            <param name="type">The type.</param>
            <returns>A series of the selected methods.</returns>
        </member>
        <member name="P:Ninject.Selection.Selector.ConstructorScorer">
            <summary>
            Gets or sets the constructor scorer.
            </summary>
        </member>
        <member name="P:Ninject.Selection.Selector.InjectionHeuristics">
            <summary>
            Gets the property injection heuristics.
            </summary>
        </member>
        <member name="T:Ninject.StandardKernel">
            <summary>
            The standard implementation of a kernel.
            </summary>
        </member>
        <member name="M:Ninject.StandardKernel.#ctor(Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.StandardKernel"/> class.
            </summary>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.StandardKernel.#ctor(Ninject.INinjectSettings,Ninject.Modules.INinjectModule[])">
            <summary>
            Initializes a new instance of the <see cref="T:Ninject.StandardKernel"/> class.
            </summary>
            <param name="settings">The configuration to use.</param>
            <param name="modules">The modules to load into the kernel.</param>
        </member>
        <member name="M:Ninject.StandardKernel.AddComponents">
            <summary>
            Adds components to the kernel during startup.
            </summary>
        </member>
        <member name="P:Ninject.StandardKernel.KernelInstance">
            <summary>
            Gets the kernel.
            </summary>
            <value>The kernel.</value>
        </member>
        <member name="T:Ninject.ModuleLoadExtensions">
            <summary>
            Extension methods that enhance module loading.
            </summary>
        </member>
        <member name="M:Ninject.ModuleLoadExtensions.Load``1(Ninject.IKernel)">
            <summary>
            Creates a new instance of the module and loads it into the kernel.
            </summary>
            <typeparam name="TModule">The type of the module.</typeparam>
            <param name="kernel">The kernel.</param>
        </member>
        <member name="M:Ninject.ModuleLoadExtensions.Load(Ninject.IKernel,Ninject.Modules.INinjectModule[])">
            <summary>
            Loads the module(s) into the kernel.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="modules">The modules to load.</param>
        </member>
        <member name="M:Ninject.ModuleLoadExtensions.Load(Ninject.IKernel,System.String[])">
            <summary>
            Loads modules from the files that match the specified pattern(s).
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="filePatterns">The file patterns (i.e. "*.dll", "modules/*.rb") to match.</param>
        </member>
        <member name="M:Ninject.ModuleLoadExtensions.Load(Ninject.IKernel,System.Reflection.Assembly[])">
            <summary>
            Loads modules defined in the specified assemblies.
            </summary>
            <param name="kernel">The kernel.</param>
            <param name="assemblies">The assemblies to search.</param>
        </member>
    </members>
</doc>
