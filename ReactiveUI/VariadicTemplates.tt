<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core.dll" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using System;
using System.Collections.Generic;
using System.Reactive.Disposables;
using System.Reactive.Linq;
using System.Diagnostics.Contracts;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Text;

<#
// NB: maxFuncLength is 4 on WP7, 12 on every other platform.
// VariadicTemplates_WP7.tt should always be a copy of VariadicTemplates.tt
// except for this section

int maxFuncLength = 12;
#>

namespace ReactiveUI
{
    public static class WhenAnyMixin 
    {
        <# for(int length=1; length <= maxFuncLength; length++) { #>
        <# var templParams = Enumerable.Range(1, length).Select(x => "T" + x.ToString()); #>
        <# string selectorTypeParams = String.Join(", ", templParams.Select(x => String.Format("IObservedChange<TSender, {0}>", x))); #>
        <# string dynamicSelectorTypeParams = String.Join(", ", templParams.Select(x => "IObservedChange<TSender, object>")); #>
        <# string selectorCall = "selector(" + String.Join(", ", Enumerable.Range(1, length).Select(x => "islot" + x.ToString())) + ")"; #>

        /// <summary>
        /// WhenAny allows you to observe whenever one or more properties on an
        /// object have changed, providing an initial value when the Observable
        /// is set up, unlike ObservableForProperty(). Use this method in
        /// constructors to set up bindings between properties that also need an
        /// initial setup.
        /// </summary>
        public static IObservable<TRet> WhenAny<TSender, TRet, <#= String.Join(",", templParams) #>>(this TSender This, 
            <# for(int i=1; i <= length; i++) { #>
                Expression<Func<TSender, T<#=i#>>> property<#=i#>, 
            <# } #>
                Func<<#= selectorTypeParams #>, TRet> selector)
        {
            <# if (length == 1){ #>
                return This.ObservableForProperty(property<#=1#>, false, false).Select(selector); 
            <# }else{ #>
            return Observable.CombineLatest(
                <# for(int i=1; i <= length; i++) { #>
                    This.ObservableForProperty(property<#=i#>, false, false), 
                <# } #>
                selector
            );
            <# } #>
        }

        /// <summary>
        /// WhenAny allows you to observe whenever one or more properties on an
        /// object have changed, providing an initial value when the Observable
        /// is set up, unlike ObservableForProperty(). Use this method in
        /// constructors to set up bindings between properties that also need an
        /// initial setup.
        /// </summary>
        public static IObservable<TRet> WhenAnyDynamic<TSender, TRet>(this TSender This, 
            <# for(int i=1; i <= length; i++) { #>
                string[] property<#=i#>, 
            <# } #>
                Func<<#= dynamicSelectorTypeParams #>, TRet> selector)
        {
            <# if (length == 1){ #>
                return ReactiveNotifyPropertyChangedMixin
                    .SubscribeToExpressionChain<TSender,object>(This, property<#=1#>, false, false).Select(selector); 
            <# }else{ #>
            return Observable.CombineLatest(
                <# for(int i=1; i <= length; i++) { #>
                    ReactiveNotifyPropertyChangedMixin
                        .SubscribeToExpressionChain<TSender,object>(This, property<#=i#>, false, false), 
                <# } #>
                selector
            );
            <# } #>
        }

    <# } #>
    }

    public static class WhenAnyObservableMixin
    {
        public static IObservable<TRet> WhenAnyObservable<TSender, TRet>(this TSender This, Expression<Func<TSender, IObservable<TRet>>> obs1)
        {
            return This.WhenAny(obs1, x => x.Value).Switch();
        }

<# for(int length=2; length <= maxFuncLength; length++) { #>
<# string paramsStr = String.Join(", ", Enumerable.Range(1, length).Select(x => "Expression<Func<TSender, IObservable<TRet>>> obs" + x.ToString())); #>
<# string varsStr = String.Join(", ", Enumerable.Range(1, length).Select(x => "obs" + x.ToString())); #>
<# string valsStr = String.Join(", ", Enumerable.Range(1, length).Select(x => "o" + x.ToString() + ".Value")); #>
        public static IObservable<TRet> WhenAnyObservable<TSender, TRet>(this TSender This, <#= paramsStr #>)
        {
            return This.WhenAny(<#= varsStr #>, (<#=varsStr.Replace("obs", "o")#>) => new[] {<#= valsStr #>})
                .Select(x => x.Merge()).Switch();
        }
<# } #>
    }
}
