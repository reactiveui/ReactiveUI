// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591,0618,0105,0672,0108,SA1402,SA1200,SA1514,SA1615,SA1210,SA1001,SA1403,SA1201,SA1306,SA1601,SA1513,SA1004,SA1516,SA1508,SA1629,SA1507,SA1121,SA1208

using System;
using System.Reactive;
using System.Reactive.Linq;
using System.Reactive.Subjects;
using ReactiveUI.Events;

{{#Namespaces}}
using {{Name}};
{{/Namespaces}}
{{#DelegateNamespaces}}
using {{Name}};
{{/DelegateNamespaces}}

{{#Namespaces}}
namespace {{Name}}
{
    /// <summary>
    /// Methods that expose events for the platform.
    /// </summary>
    public static class EventsMixin
    {
{{#Types}}
        /// <summary>
        /// This class emits {{Name}} events as observables.
        /// </summary>
        /// <param name="this">This instance of {{Name}}.</param>
        public static {{Name}}Events Events(this {{Name}} @this) => new {{Name}}Events(@this);
{{/Types}}
    }

{{#Types}}

    /// <summary>
    /// This class emits {{Name}} events as observables.
    /// </summary>
    public class {{Name}}Events
{{#Parent}}
        : {{Name}}Events
{{/Parent}}
    {
        private {{Name}} _this;

        /// <summary>
        /// Initializes a new instance of the <see cref="{{Name}}" /> class.
        /// </summary>
        /// <param name="this">This instance of {{Name}}.</param>
        public {{Name}}Events({{Name}} @this)
{{#Parent}}
            : base(@this)
{{/Parent}}
        {
            _this = @this;
        }
{{#Events}}

        /// <summary>
        /// Returns an observable sequence of {{EventArgsType}}.
        /// </summary>
{{#ObsoleteEventInfo}}
        [Obsolete{{#ObsoleteEventInfo.Message}}("{{ObsoleteEventInfo.Message}}"{{#ObsoleteEventInfo.IsError}}, true{{/ObsoleteEventInfo.IsError}}){{/ObsoleteEventInfo.Message}}]
{{/ObsoleteEventInfo}}
        public IObservable<{{EventArgsType}}> {{Name}} =>
            Observable.FromEventPattern<{{EventHandlerType}}, {{EventArgsType}}>(x => _this.{{Name}} += x, x => _this.{{Name}} -= x).Select(x => x.EventArgs);
        {{/Events}}
    }
        {{/Types}}
}

{{/Namespaces}}
{{#DelegateNamespaces}}

namespace {{Name}}.Rx
{
    {{#Types}}
    public {{Abstract}} partial class {{Name}}Rx : {{Name}}
    {
        {{#ZeroParameterMethods}}
        private readonly SingleAwaitSubject<Unit> _{{Name}} = new SingleAwaitSubject<Unit>();

        /// <summary>
        /// An observable sequence of signals.
        /// </summary>
        public IObservable<Unit> {{Name}}Obs => _{{Name}};

        /// <inheritdoc/>
        public override void {{Name}}()
        {
            _{{Name}}.OnNext(Unit.Default);
        }

        {{/ZeroParameterMethods}}
        {{#SingleParameterMethods}}
        private readonly SingleAwaitSubject<{{ParameterType}}>
            _{{Name}} = new SingleAwaitSubject<{{ParameterType}}>();

        /// <summary>
        /// An observable sequence of {{ParameterType}}.
        /// </summary>
        public IObservable<{{ParameterType}}> {{Name}}Obs => _{{Name}};

        /// <inheritdoc/>
        public override void {{Name}}({{ParameterType}} {{ParameterName}})
        {
            _{{Name}}.OnNext({{ParameterName}});
        }

        {{/SingleParameterMethods}}

        {{#MultiParameterMethods}}
        private readonly SingleAwaitSubject<Tuple<{{ParameterTypeList}}>> _{{Name}} = new SingleAwaitSubject<Tuple<{{ParameterTypeList}}>>();

        /// <summary>
        /// An observable sequence of elements.
        /// </summary>
        public IObservable<Tuple<{{ParameterTypeList}}>> {{Name}}Obs => _{{Name}};

        /// <inheritdoc/>
        public override void {{Name}}({{ParameterList}})
        {
            _{{Name}}.OnNext(Tuple.Create({{ParameterNameList}}));
        }

    {{/MultiParameterMethods}}
    }
    {{/Types}}
}
{{/DelegateNamespaces}}

#pragma warning restore 1591,0618,0105,0672,0108,SA1402,SA1200,SA1514,SA1615,SA1210,SA1001,SA1403,SA1201,SA1306,SA1601,SA1513,SA1004,SA1516,SA1508,SA1629,SA1507,SA1121,SA1208
