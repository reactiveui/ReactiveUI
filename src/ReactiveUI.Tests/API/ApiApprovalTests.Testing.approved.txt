[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")]
namespace ReactiveUI.Testing
{
    public class static TestUtils
    {
        public static void AdvanceByMs(this Microsoft.Reactive.Testing.TestScheduler sched, double milliseconds) { }
        public static void AdvanceToMs(this Microsoft.Reactive.Testing.TestScheduler sched, double milliseconds) { }
        public static long FromTimeSpan(this Microsoft.Reactive.Testing.TestScheduler sched, System.TimeSpan span) { }
        public static Microsoft.Reactive.Testing.Recorded<System.Reactive.Notification<T>> OnCompletedAt<T>(this Microsoft.Reactive.Testing.TestScheduler sched, double milliseconds) { }
        public static Microsoft.Reactive.Testing.Recorded<System.Reactive.Notification<T>> OnErrorAt<T>(this Microsoft.Reactive.Testing.TestScheduler sched, double milliseconds, System.Exception ex) { }
        public static Microsoft.Reactive.Testing.Recorded<System.Reactive.Notification<T>> OnNextAt<T>(this Microsoft.Reactive.Testing.TestScheduler sched, double milliseconds, T value) { }
        public static TRet With<T, TRet>(this T sched, System.Func<T, TRet> block)
            where T : System.Reactive.Concurrency.IScheduler { }
        public static void With<T>(this T sched, System.Action<T> block)
            where T : System.Reactive.Concurrency.IScheduler { }
        public static TRet With<TRet>(this ReactiveUI.IMessageBus messageBus, System.Func<TRet> block) { }
        public static void With(this ReactiveUI.IMessageBus messageBus, System.Action block) { }
        public static System.Threading.Tasks.Task<TRet> WithAsync<T, TRet>(this T sched, System.Func<T, System.Threading.Tasks.Task<TRet>> block)
            where T : System.Reactive.Concurrency.IScheduler { }
        public static System.Threading.Tasks.Task WithAsync<T>(this T sched, System.Func<T, System.Threading.Tasks.Task> block)
            where T : System.Reactive.Concurrency.IScheduler { }
        public static System.IDisposable WithMessageBus(this ReactiveUI.IMessageBus messageBus) { }
        public static System.IDisposable WithScheduler(System.Reactive.Concurrency.IScheduler sched) { }
    }
}