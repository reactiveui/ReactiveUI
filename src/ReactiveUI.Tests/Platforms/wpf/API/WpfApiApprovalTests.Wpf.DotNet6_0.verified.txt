[assembly: System.Runtime.CompilerServices.InternalsVisibleTo("ReactiveUI.Tests")]
[assembly: System.Runtime.Versioning.SupportedOSPlatform("Windows10.0.17763.0")]
[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v6.0", FrameworkDisplayName=".NET 6.0")]
[assembly: System.Runtime.Versioning.TargetPlatform("Windows10.0.17763.0")]
[assembly: System.Windows.Markup.XmlnsDefinition("http://reactiveui.net", "ReactiveUI")]
[assembly: System.Windows.ThemeInfo(System.Windows.ResourceDictionaryLocation.None, System.Windows.ResourceDictionaryLocation.SourceAssembly)]
namespace ReactiveUI
{
    public class ActivationForViewFetcher : ReactiveUI.IActivationForViewFetcher
    {
        public ActivationForViewFetcher() { }
        public System.IObservable<bool> GetActivationForView(ReactiveUI.IActivatableView view) { }
        public int GetAffinityForView(System.Type view) { }
    }
    public class AutoDataTemplateBindingHook : ReactiveUI.IPropertyBindingHook
    {
        public AutoDataTemplateBindingHook() { }
        public static System.Lazy<System.Windows.DataTemplate> DefaultItemTemplate { get; }
        public bool ExecuteHook(object? source, object target, System.Func<ReactiveUI.IObservedChange<object, object>[]> getCurrentViewModelProperties, System.Func<ReactiveUI.IObservedChange<object, object>[]> getCurrentViewProperties, ReactiveUI.BindingDirection direction) { }
    }
    public class AutoSuspendHelper : Splat.IEnableLogger
    {
        public AutoSuspendHelper(System.Windows.Application app) { }
        public System.TimeSpan IdleTimeout { get; set; }
    }
    [System.Flags]
    public enum BooleanToVisibilityHint
    {
        None = 0,
        Inverse = 2,
        UseHidden = 4,
    }
    public class BooleanToVisibilityTypeConverter : ReactiveUI.IBindingTypeConverter, Splat.IEnableLogger
    {
        public BooleanToVisibilityTypeConverter() { }
        public int GetAffinityForObjects(System.Type fromType, System.Type toType) { }
        public bool TryConvert(object? from, System.Type toType, object? conversionHint, out object result) { }
    }
    public class DependencyObjectObservableForProperty : ReactiveUI.ICreatesObservableForProperty, Splat.IEnableLogger
    {
        public DependencyObjectObservableForProperty() { }
        public int GetAffinityForObject(System.Type type, string propertyName, bool beforeChanged = false) { }
        public System.IObservable<ReactiveUI.IObservedChange<object, object?>> GetNotificationForProperty(object sender, System.Linq.Expressions.Expression expression, string propertyName, bool beforeChanged = false, bool suppressWarnings = false) { }
    }
    public class PlatformOperations : ReactiveUI.IPlatformOperations
    {
        public PlatformOperations() { }
        public string? GetOrientation() { }
    }
    public class ReactivePage<TViewModel> : System.Windows.Controls.Page, ReactiveUI.IActivatableView, ReactiveUI.IViewFor, ReactiveUI.IViewFor<TViewModel>
        where TViewModel :  class
    {
        public static readonly System.Windows.DependencyProperty ViewModelProperty;
        public ReactivePage() { }
        public TViewModel BindingRoot { get; }
        public TViewModel ViewModel { get; set; }
    }
    public class ReactiveUserControl<TViewModel> : System.Windows.Controls.UserControl, ReactiveUI.IActivatableView, ReactiveUI.IViewFor, ReactiveUI.IViewFor<TViewModel>
        where TViewModel :  class
    {
        public static readonly System.Windows.DependencyProperty ViewModelProperty;
        public ReactiveUserControl() { }
        public TViewModel BindingRoot { get; }
        public TViewModel ViewModel { get; set; }
    }
    public class ReactiveWindow<TViewModel> : System.Windows.Window, ReactiveUI.IActivatableView, ReactiveUI.IViewFor, ReactiveUI.IViewFor<TViewModel>
        where TViewModel :  class
    {
        public static readonly System.Windows.DependencyProperty ViewModelProperty;
        public ReactiveWindow() { }
        public TViewModel BindingRoot { get; }
        public TViewModel ViewModel { get; set; }
    }
    public class RoutedViewHost : ReactiveUI.TransitioningContentControl, ReactiveUI.IActivatableView, Splat.IEnableLogger
    {
        public static readonly System.Windows.DependencyProperty DefaultContentProperty;
        public static readonly System.Windows.DependencyProperty RouterProperty;
        public static readonly System.Windows.DependencyProperty ViewContractObservableProperty;
        public RoutedViewHost() { }
        public object DefaultContent { get; set; }
        public ReactiveUI.RoutingState Router { get; set; }
        public string? ViewContract { get; set; }
        public System.IObservable<string?> ViewContractObservable { get; set; }
        public ReactiveUI.IViewLocator? ViewLocator { get; set; }
    }
    [System.Windows.TemplatePart(Name="PART_Container", Type=typeof(System.Windows.FrameworkElement?))]
    [System.Windows.TemplatePart(Name="PART_CurrentContentPresentationSite", Type=typeof(System.Windows.Controls.ContentPresenter?))]
    [System.Windows.TemplatePart(Name="PART_PreviousImageSite", Type=typeof(System.Windows.Controls.Image?))]
    [System.Windows.TemplateVisualState(GroupName="PresentationStates", Name="Normal")]
    public class TransitioningContentControl : System.Windows.Controls.ContentControl
    {
        public static readonly System.Windows.DependencyProperty TransitionDirectionProperty;
        public static readonly System.Windows.DependencyProperty TransitionDurationProperty;
        public static readonly System.Windows.DependencyProperty TransitionProperty;
        public TransitioningContentControl() { }
        public ReactiveUI.TransitioningContentControl.TransitionDirection Direction { get; set; }
        public System.TimeSpan Duration { get; set; }
        public ReactiveUI.TransitioningContentControl.TransitionType Transition { get; set; }
        public event System.Windows.RoutedEventHandler? TransitionCompleted;
        public event System.Windows.RoutedEventHandler? TransitionStarted;
        public override void OnApplyTemplate() { }
        protected override void OnContentChanged(object oldContent, object newContent) { }
        public enum TransitionDirection
        {
            Up = 0,
            Down = 1,
            Left = 2,
            Right = 3,
        }
        public enum TransitionType
        {
            Fade = 0,
            Move = 1,
            Slide = 2,
            Drop = 3,
            Bounce = 4,
        }
    }
    public class ViewModelViewHost : ReactiveUI.TransitioningContentControl, ReactiveUI.IActivatableView, ReactiveUI.IViewFor, Splat.IEnableLogger
    {
        public static readonly System.Windows.DependencyProperty ContractFallbackByPassProperty;
        public static readonly System.Windows.DependencyProperty DefaultContentProperty;
        public static readonly System.Windows.DependencyProperty ViewContractObservableProperty;
        public static readonly System.Windows.DependencyProperty ViewModelProperty;
        public ViewModelViewHost() { }
        public bool ContractFallbackByPass { get; set; }
        public object DefaultContent { get; set; }
        public string? ViewContract { get; set; }
        public System.IObservable<string?> ViewContractObservable { get; set; }
        public ReactiveUI.IViewLocator? ViewLocator { get; set; }
        public object? ViewModel { get; set; }
        protected virtual void ResolveViewForViewModel(object? viewModel, string? contract) { }
    }
}
namespace ReactiveUI.Wpf
{
    public class Registrations
    {
        public Registrations() { }
        public void Register(System.Action<System.Func<object>, System.Type> registerFunction) { }
    }
}
