[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")]
[assembly: System.Windows.Markup.XmlnsDefinitionAttribute("http://reactiveui.net", "ReactiveUI")]
[assembly: System.Windows.ThemeInfoAttribute(System.Windows.ResourceDictionaryLocation.None, System.Windows.ResourceDictionaryLocation.SourceAssembly)]
namespace ReactiveUI
{
    public class ActivationForViewFetcher : ReactiveUI.IActivationForViewFetcher
    {
        public ActivationForViewFetcher() { }
        public System.IObservable<bool> GetActivationForView(ReactiveUI.IActivatable view) { }
        public int GetAffinityForView(System.Type view) { }
    }
    public class AutoDataTemplateBindingHook : ReactiveUI.IPropertyBindingHook
    {
        public AutoDataTemplateBindingHook() { }
        public static System.Lazy<System.Windows.DataTemplate> DefaultItemTemplate { get; }
        public bool ExecuteHook(object source, object target, System.Func<ReactiveUI.IObservedChange<, >[]> getCurrentViewModelProperties, System.Func<ReactiveUI.IObservedChange<, >[]> getCurrentViewProperties, ReactiveUI.BindingDirection direction) { }
    }
    public class AutoSuspendHelper : Splat.IEnableLogger
    {
        public AutoSuspendHelper(System.Windows.Application app) { }
        public System.TimeSpan IdleTimeout { get; set; }
    }
    [System.FlagsAttribute()]
    public enum BooleanToVisibilityHint
    {
        None = 0,
        Inverse = 2,
        UseHidden = 4,
    }
    public class BooleanToVisibilityTypeConverter : ReactiveUI.IBindingTypeConverter, Splat.IEnableLogger
    {
        public BooleanToVisibilityTypeConverter() { }
        public int GetAffinityForObjects(System.Type fromType, System.Type toType) { }
        public bool TryConvert(object from, System.Type toType, object conversionHint, out object result) { }
    }
    public class DependencyObjectObservableForProperty : ReactiveUI.ICreatesObservableForProperty, Splat.IEnableLogger
    {
        public DependencyObjectObservableForProperty() { }
        public int GetAffinityForObject(System.Type type, string propertyName, bool beforeChanged = False) { }
        public System.IObservable<ReactiveUI.IObservedChange<object, object>> GetNotificationForProperty(object sender, System.Linq.Expressions.Expression expression, string propertyName, bool beforeChanged = False) { }
    }
    public class PlatformOperations
    {
        public PlatformOperations() { }
        public string GetOrientation() { }
    }
    public abstract class ReactiveUserControl<TViewModel> : System.Windows.Controls.UserControl, ReactiveUI.IActivatable, ReactiveUI.IViewFor, ReactiveUI.IViewFor<TViewModel>
        where TViewModel :  class
    {
        public static readonly System.Windows.DependencyProperty ViewModelProperty;
        protected ReactiveUserControl() { }
        public TViewModel BindingRoot { get; }
        public TViewModel ViewModel { get; set; }
    }
    public abstract class ReactiveWindow<TViewModel> : System.Windows.Window, ReactiveUI.IActivatable, ReactiveUI.IViewFor, ReactiveUI.IViewFor<TViewModel>
        where TViewModel :  class
    {
        public static readonly System.Windows.DependencyProperty ViewModelProperty;
        protected ReactiveWindow() { }
        public TViewModel BindingRoot { get; }
        public TViewModel ViewModel { get; set; }
    }
    public class RoutedViewHost : ReactiveUI.TransitioningContentControl, ReactiveUI.IActivatable, Splat.IEnableLogger
    {
        public static readonly System.Windows.DependencyProperty DefaultContentProperty;
        public static readonly System.Windows.DependencyProperty RouterProperty;
        public static readonly System.Windows.DependencyProperty ViewContractObservableProperty;
        public RoutedViewHost() { }
        public object DefaultContent { get; set; }
        public ReactiveUI.RoutingState Router { get; set; }
        public System.IObservable<string> ViewContractObservable { get; set; }
        public ReactiveUI.IViewLocator ViewLocator { get; set; }
    }
    [System.Windows.TemplatePartAttribute(Name="PART_Container", Type=typeof(System.Windows.FrameworkElement))]
    [System.Windows.TemplatePartAttribute(Name="PART_CurrentContentPresentationSite", Type=typeof(System.Windows.Controls.ContentPresenter))]
    [System.Windows.TemplatePartAttribute(Name="PART_PreviousContentPresentationSite", Type=typeof(System.Windows.Controls.ContentPresenter))]
    [System.Windows.TemplateVisualStateAttribute(GroupName="PresentationStates", Name="Normal")]
    public class TransitioningContentControl : System.Windows.Controls.ContentControl
    {
        public static readonly System.Windows.DependencyProperty TransitionPartProperty;
        public static readonly System.Windows.DependencyProperty TransitionProperty;
        public TransitioningContentControl() { }
        public ReactiveUI.TransitioningContentControl.TransitionType Transition { get; set; }
        public ReactiveUI.TransitioningContentControl.TransitionPartType TransitionPart { get; set; }
        public event System.Windows.RoutedEventHandler TransitionCompleted;
        public event System.Windows.RoutedEventHandler TransitionStarted;
        public override void OnApplyTemplate() { }
        protected override void OnContentChanged(object oldContent, object newContent) { }
        public enum TransitionPartType
        {
            Out = 0,
            In = 1,
            OutIn = 2,
        }
        public enum TransitionType
        {
            Fade = 0,
            FadeDown = 1,
            SlideLeft = 2,
        }
    }
    public class ViewModelViewHost : ReactiveUI.TransitioningContentControl, ReactiveUI.IActivatable, ReactiveUI.IViewFor, Splat.IEnableLogger, System.IDisposable
    {
        public static readonly System.Windows.DependencyProperty DefaultContentProperty;
        public static readonly System.Windows.DependencyProperty ViewContractObservableProperty;
        public static readonly System.Windows.DependencyProperty ViewModelProperty;
        public ViewModelViewHost() { }
        public object DefaultContent { get; set; }
        public string ViewContract { get; set; }
        public System.IObservable<string> ViewContractObservable { get; set; }
        public ReactiveUI.IViewLocator ViewLocator { get; set; }
        public object ViewModel { get; set; }
        public void Dispose() { }
        protected virtual void Dispose(bool isDisposing) { }
    }
}
namespace ReactiveUI.Wpf
{
    public class Registrations
    {
        public Registrations() { }
        public void Register(System.Action<System.Func<object>, System.Type> registerFunction) { }
    }
}