[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v3.0", FrameworkDisplayName="")]
namespace ReactiveUI.Winforms
{
    public class ActivationForViewFetcher : ReactiveUI.IActivationForViewFetcher, Splat.IEnableLogger
    {
        public ActivationForViewFetcher() { }
        public System.IObservable<bool> GetActivationForView(ReactiveUI.IActivatableView view) { }
        public int GetAffinityForView(System.Type view) { }
    }
    public class ContentControlBindingHook : ReactiveUI.IPropertyBindingHook
    {
        public ContentControlBindingHook() { }
        public bool ExecuteHook(object source, object target, System.Func<ReactiveUI.IObservedChange<, >[]> getCurrentViewModelProperties, System.Func<ReactiveUI.IObservedChange<, >[]> getCurrentViewProperties, ReactiveUI.BindingDirection direction) { }
    }
    public class CreatesWinformsCommandBinding : ReactiveUI.ICreatesCommandBinding
    {
        public CreatesWinformsCommandBinding() { }
        public System.IDisposable BindCommandToObject(System.Windows.Input.ICommand command, object target, System.IObservable<object> commandParameter) { }
        public System.IDisposable BindCommandToObject<TEventArgs>(System.Windows.Input.ICommand command, object target, System.IObservable<object> commandParameter, string eventName) { }
        public int GetAffinityForObject(System.Type type, bool hasEventTarget) { }
    }
    public class PanelSetMethodBindingConverter : ReactiveUI.ISetMethodBindingConverter, Splat.IEnableLogger
    {
        public PanelSetMethodBindingConverter() { }
        public int GetAffinityForObjects(System.Type fromType, System.Type toType) { }
        public object PerformSet(object toTarget, object newValue, object[] arguments) { }
    }
    public class PlatformOperations
    {
        public PlatformOperations() { }
        public string GetOrientation() { }
    }
    public class ReactiveUserControl<TViewModel> : System.Windows.Forms.UserControl, ReactiveUI.IActivatableView, ReactiveUI.IViewFor, ReactiveUI.IViewFor<TViewModel>
        where TViewModel :  class
    {
        public ReactiveUserControl() { }
        [System.ComponentModel.Bindable(true)]
        [System.ComponentModel.Category("ReactiveUI")]
        [System.ComponentModel.Description("The ViewModel.")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public TViewModel ViewModel { get; set; }
        protected override void Dispose(bool disposing) { }
    }
    public class Registrations
    {
        public Registrations() { }
        public void Register(System.Action<System.Func<object>, System.Type> registerFunction) { }
    }
    [System.ComponentModel.DefaultProperty("ViewModel")]
    public class RoutedControlHost : System.Windows.Forms.UserControl, ReactiveUI.IReactiveObject, Splat.IEnableLogger, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging
    {
        public RoutedControlHost() { }
        [System.ComponentModel.Category("ReactiveUI")]
        [System.ComponentModel.Description("The default control when no viewmodel is specified")]
        public System.Windows.Forms.Control DefaultContent { get; set; }
        [System.ComponentModel.Category("ReactiveUI")]
        [System.ComponentModel.Description("The router.")]
        public ReactiveUI.RoutingState Router { get; set; }
        [System.ComponentModel.Browsable(false)]
        public System.IObservable<string> ViewContractObservable { get; set; }
        [System.ComponentModel.Browsable(false)]
        public ReactiveUI.IViewLocator ViewLocator { get; set; }
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        protected override void Dispose(bool disposing) { }
    }
    public class TableContentSetMethodBindingConverter : ReactiveUI.ISetMethodBindingConverter, Splat.IEnableLogger
    {
        public TableContentSetMethodBindingConverter() { }
        public int GetAffinityForObjects(System.Type fromType, System.Type toType) { }
        public object PerformSet(object toTarget, object newValue, object[] arguments) { }
    }
    [System.ComponentModel.DefaultProperty("ViewModel")]
    public class ViewModelControlHost : System.Windows.Forms.UserControl, ReactiveUI.IActivatableView, ReactiveUI.IReactiveObject, ReactiveUI.IViewFor, Splat.IEnableLogger, System.ComponentModel.INotifyPropertyChanged, System.ComponentModel.INotifyPropertyChanging
    {
        public ViewModelControlHost() { }
        [System.ComponentModel.Bindable(true)]
        [System.ComponentModel.Category("ReactiveUI")]
        [System.ComponentModel.DefaultValue(true)]
        [System.ComponentModel.Description("Cache Views")]
        public bool CacheViews { get; set; }
        [System.ComponentModel.Bindable(true)]
        [System.ComponentModel.Category("ReactiveUI")]
        [System.ComponentModel.Description("The Current View")]
        public object Content { get; set; }
        public System.Windows.Forms.Control CurrentView { get; }
        [System.ComponentModel.Category("ReactiveUI")]
        [System.ComponentModel.Description("The default control when no viewmodel is specified")]
        public System.Windows.Forms.Control DefaultContent { get; set; }
        [System.ComponentModel.Browsable(false)]
        public System.IObservable<string> ViewContractObservable { get; set; }
        [System.ComponentModel.Browsable(false)]
        public ReactiveUI.IViewLocator ViewLocator { get; set; }
        [System.ComponentModel.Bindable(true)]
        [System.ComponentModel.Category("ReactiveUI")]
        [System.ComponentModel.Description("The viewmodel to host.")]
        public object ViewModel { get; set; }
        public static bool DefaultCacheViewsEnabled { get; set; }
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        public event System.ComponentModel.PropertyChangingEventHandler PropertyChanging;
        protected override void Dispose(bool disposing) { }
    }
    public class WinformsCreatesObservableForProperty : ReactiveUI.ICreatesObservableForProperty, Splat.IEnableLogger
    {
        public WinformsCreatesObservableForProperty() { }
        public int GetAffinityForObject(System.Type type, string propertyName, bool beforeChanged = false) { }
        public System.IObservable<ReactiveUI.IObservedChange<object, object>> GetNotificationForProperty(object sender, System.Linq.Expressions.Expression expression, string propertyName, bool beforeChanged = false, bool suppressWarnings = false) { }
    }
}