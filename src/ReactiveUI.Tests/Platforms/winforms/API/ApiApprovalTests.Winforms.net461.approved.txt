[assembly: System.Runtime.Versioning.TargetFrameworkAttribute(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")]
namespace ReactiveUI.Winforms
{
    public class ActivationForViewFetcher : ReactiveUI.IActivationForViewFetcher, Splat.IEnableLogger
    {
        public ActivationForViewFetcher() { }
        public System.IObservable<bool> GetActivationForView(ReactiveUI.IActivatable view) { }
        public int GetAffinityForView(System.Type view) { }
    }
    public class CreatesWinformsCommandBinding : ReactiveUI.ICreatesCommandBinding
    {
        public CreatesWinformsCommandBinding() { }
        public System.IDisposable BindCommandToObject(System.Windows.Input.ICommand command, object target, System.IObservable<object> commandParameter) { }
        public System.IDisposable BindCommandToObject<TEventArgs>(System.Windows.Input.ICommand command, object target, System.IObservable<object> commandParameter, string eventName) { }
        public int GetAffinityForObject(System.Type type, bool hasEventTarget) { }
    }
    public class PlatformOperations
    {
        public PlatformOperations() { }
        public string GetOrientation() { }
    }
    public class ReactiveUserControl<TViewModel> : System.Windows.Forms.UserControl, ReactiveUI.IActivatable, ReactiveUI.IViewFor, ReactiveUI.IViewFor<TViewModel>
        where TViewModel :  class
    {
        public ReactiveUserControl() { }
        [System.ComponentModel.BindableAttribute(true)]
        [System.ComponentModel.CategoryAttribute("ReactiveUI")]
        [System.ComponentModel.DescriptionAttribute("The ViewModel.")]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public TViewModel ViewModel { get; set; }
        protected override void Dispose(bool disposing) { }
    }
    public class Registrations
    {
        public Registrations() { }
        public void Register(System.Action<System.Func<object>, System.Type> registerFunction) { }
    }
    [System.ComponentModel.DefaultPropertyAttribute("ViewModel")]
    public class RoutedControlHost : System.Windows.Forms.UserControl, ReactiveUI.INotifyPropertyChanging, ReactiveUI.IReactiveObject, Splat.IEnableLogger, System.ComponentModel.INotifyPropertyChanged
    {
        public RoutedControlHost() { }
        [System.ComponentModel.CategoryAttribute("ReactiveUI")]
        [System.ComponentModel.DescriptionAttribute("The default control when no viewmodel is specified")]
        public System.Windows.Forms.Control DefaultContent { get; set; }
        [System.ComponentModel.CategoryAttribute("ReactiveUI")]
        [System.ComponentModel.DescriptionAttribute("The router.")]
        public ReactiveUI.RoutingState Router { get; set; }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.IObservable<string> ViewContractObservable { get; set; }
        [System.ComponentModel.BrowsableAttribute(false)]
        public ReactiveUI.IViewLocator ViewLocator { get; set; }
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        public event ReactiveUI.PropertyChangingEventHandler PropertyChanging;
        protected override void Dispose(bool disposing) { }
    }
    [System.ComponentModel.DefaultPropertyAttribute("ViewModel")]
    public class ViewModelControlHost : System.Windows.Forms.UserControl, ReactiveUI.IActivatable, ReactiveUI.INotifyPropertyChanging, ReactiveUI.IReactiveObject, ReactiveUI.IViewFor, Splat.IEnableLogger, System.ComponentModel.INotifyPropertyChanged
    {
        public ViewModelControlHost() { }
        [System.ComponentModel.BindableAttribute(true)]
        [System.ComponentModel.CategoryAttribute("ReactiveUI")]
        [System.ComponentModel.DefaultValueAttribute(true)]
        [System.ComponentModel.DescriptionAttribute("Cache Views")]
        public bool CacheViews { get; set; }
        [System.ComponentModel.BindableAttribute(true)]
        [System.ComponentModel.CategoryAttribute("ReactiveUI")]
        [System.ComponentModel.DescriptionAttribute("The Current View")]
        public object Content { get; set; }
        public System.Windows.Forms.Control CurrentView { get; }
        public static bool DefaultCacheViewsEnabled { get; set; }
        [System.ComponentModel.CategoryAttribute("ReactiveUI")]
        [System.ComponentModel.DescriptionAttribute("The default control when no viewmodel is specified")]
        public System.Windows.Forms.Control DefaultContent { get; set; }
        [System.ComponentModel.BrowsableAttribute(false)]
        public System.IObservable<string> ViewContractObservable { get; set; }
        [System.ComponentModel.BrowsableAttribute(false)]
        public ReactiveUI.IViewLocator ViewLocator { get; set; }
        [System.ComponentModel.BindableAttribute(true)]
        [System.ComponentModel.CategoryAttribute("ReactiveUI")]
        [System.ComponentModel.DescriptionAttribute("The viewmodel to host.")]
        public object ViewModel { get; set; }
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        public event ReactiveUI.PropertyChangingEventHandler PropertyChanging;
        protected override void Dispose(bool disposing) { }
    }
    public class WinformsCreatesObservableForProperty : ReactiveUI.ICreatesObservableForProperty, Splat.IEnableLogger
    {
        public WinformsCreatesObservableForProperty() { }
        public int GetAffinityForObject(System.Type type, string propertyName, bool beforeChanged = False) { }
        public System.IObservable<ReactiveUI.IObservedChange<object, object>> GetNotificationForProperty(object sender, System.Linq.Expressions.Expression expression, string propertyName, bool beforeChanged = False) { }
    }
}
namespace ReactiveUI.Winforms.Legacy
{
    [System.ObsoleteAttribute("ReactiveList is no longer supported. We suggest replacing it with DynamicData htt" +
        "ps://github.com/rolandpheasant/dynamicdata")]
    public interface IReactiveDerivedBindingList<T> : ReactiveUI.INotifyCollectionChanging, ReactiveUI.INotifyPropertyChanging, ReactiveUI.IReactiveObject, ReactiveUI.Legacy.IReactiveCollection<T>, ReactiveUI.Legacy.IReactiveDerivedList<T>, ReactiveUI.Legacy.IReactiveNotifyCollectionChanged<T>, ReactiveUI.Legacy.IReactiveNotifyCollectionItemChanged<T>, ReactiveUI.Legacy.IReadOnlyReactiveCollection<T>, ReactiveUI.Legacy.IReadOnlyReactiveList<T>, Splat.IEnableLogger, System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IReadOnlyCollection<T>, System.Collections.Generic.IReadOnlyList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.IBindingList, System.ComponentModel.INotifyPropertyChanged, System.IDisposable { }
    [System.ObsoleteAttribute("ReactiveList is no longer supported. We suggest replacing it with DynamicData htt" +
        "ps://github.com/rolandpheasant/dynamicdata")]
    public class static ObservableCollectionMixin
    {
        public static ReactiveUI.Winforms.Legacy.IReactiveDerivedBindingList<TNew> CreateDerivedBindingList<T, TNew, TDontCare>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, TNew> selector, System.Action<TNew> removed, System.Func<T, bool> filter = null, System.Func<TNew, TNew, int> orderer = null, System.IObservable<TDontCare> signalReset = null) { }
        public static ReactiveUI.Winforms.Legacy.IReactiveDerivedBindingList<TNew> CreateDerivedBindingList<T, TNew, TDontCare>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, TNew> selector, System.Func<T, bool> filter = null, System.Func<TNew, TNew, int> orderer = null, System.IObservable<TDontCare> signalReset = null) { }
        public static ReactiveUI.Winforms.Legacy.IReactiveDerivedBindingList<TNew> CreateDerivedBindingList<T, TNew>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, TNew> selector, System.Action<TNew> removed, System.Func<T, bool> filter = null, System.Func<TNew, TNew, int> orderer = null) { }
        public static ReactiveUI.Winforms.Legacy.IReactiveDerivedBindingList<TNew> CreateDerivedBindingList<T, TNew>(this System.Collections.Generic.IEnumerable<T> collection, System.Func<T, TNew> selector, System.Func<T, bool> filter = null, System.Func<TNew, TNew, int> orderer = null) { }
    }
    [System.ObsoleteAttribute("ReactiveList is no longer supported. We suggest replacing it with DynamicData htt" +
        "ps://github.com/rolandpheasant/dynamicdata")]
    public class ReactiveBindingList<T> : ReactiveUI.Legacy.ReactiveList<T>, System.Collections.ICollection, System.Collections.IEnumerable, System.Collections.IList, System.ComponentModel.IBindingList, System.ComponentModel.ICancelAddNew, System.ComponentModel.IRaiseItemChangedEvents
    {
        public ReactiveBindingList() { }
        public ReactiveBindingList(System.Collections.Generic.IEnumerable<T> items) { }
        public bool AllowEdit { get; }
        public bool AllowNew { get; }
        public bool AllowRemove { get; }
        public bool IsSorted { get; }
        public bool RaisesItemChangedEvents { get; }
        public System.ComponentModel.ListSortDirection SortDirection { get; }
        public System.ComponentModel.PropertyDescriptor SortProperty { get; }
        public bool SupportsChangeNotification { get; }
        public bool SupportsSearching { get; }
        public bool SupportsSorting { get; }
        public event System.ComponentModel.ListChangedEventHandler ListChanged;
        public void AddIndex(System.ComponentModel.PropertyDescriptor property) { }
        public object AddNew() { }
        public void ApplySort(System.ComponentModel.PropertyDescriptor property, System.ComponentModel.ListSortDirection direction) { }
        public void CancelNew(int itemIndex) { }
        public void EndNew(int itemIndex) { }
        public int Find(System.ComponentModel.PropertyDescriptor property, object key) { }
        protected override void RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs e) { }
        public void RemoveIndex(System.ComponentModel.PropertyDescriptor property) { }
        public void RemoveSort() { }
    }
}